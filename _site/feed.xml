<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Mr Wind</title>
    <description>A personal blog website for recording what I think and what I do</description>
    <link>http://0.0.0.0:4000/</link>
    <atom:link href="http://0.0.0.0:4000/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Sun, 20 Sep 2020 04:55:52 -0500</pubDate>
    <lastBuildDate>Sun, 20 Sep 2020 04:55:52 -0500</lastBuildDate>
    <generator>Jekyll v4.0.0</generator>
    
      <item>
        <title>在Docker中运行Jekyll</title>
        <description>&lt;p&gt;Jekyll ——静态网站生成框架，这个github的静态网站数据就是用Jekyll生成的。但Jekyll的安装过程非常琐碎，直接安装到 Host OS 上是一种污染环境的方法。而Docker提供了不需要自己配置的运行环境，并且这样的方式适用于 Linux 和 Windows。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;首先是获取 Jekyll 的最新 Docker 镜像：
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker pull jekyll/jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;切换到你的 Jekyll 网站所在目录，执行这条命令启动 Jekyll：
    &lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c&quot;&gt;#blog 表示运行的container的命名&lt;/span&gt;
docker run &lt;span class=&quot;nt&quot;&gt;--mount&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;bind&lt;/span&gt;,source&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;$(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;pwd&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;)&lt;/span&gt;,target&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;/srv/jekyll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
&lt;span class=&quot;nt&quot;&gt;-p&lt;/span&gt; 4000:4000 &lt;span class=&quot;nt&quot;&gt;--name&lt;/span&gt; blog &lt;span class=&quot;nt&quot;&gt;-it&lt;/span&gt; jekyll/jekyll &lt;span class=&quot;se&quot;&gt;\&lt;/span&gt;
jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;
  &lt;/li&gt;
  &lt;li&gt;通过 localhost:4000 访问到这个 Jekyll 的动态生成结果了。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;因为我们给这个 Container 赋予了名字 blog，所以之后如果再次需要这个 Container 的话，只需要这样就可以启动：&lt;/p&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;docker start &lt;span class=&quot;nt&quot;&gt;-i&lt;/span&gt; blog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Sun, 20 Sep 2020 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/jekyll/2020/09/20/jelly_in_docker/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/jekyll/2020/09/20/jelly_in_docker/</guid>
        
        <category>blog</category>
        
        <category>docker</category>
        
        
        <category>jekyll</category>
        
      </item>
    
      <item>
        <title>贝叶斯思维——chapter3（估计）</title>
        <description>&lt;h1 id=&quot;31-骰子问题&quot;&gt;3.1 骰子问题&lt;/h1&gt;
&lt;p&gt;假设我有５颗骰子，分别为4面，6面，8面，12面，20面。
现在我从里面随机选取一个，投掷以后得到6，问最有可能取出的是哪个骰子？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这里通过3个步骤来解决这个问题：&lt;/strong&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;选择假设的表示方法&lt;/li&gt;
  &lt;li&gt;选择数据的表示方法&lt;/li&gt;
  &lt;li&gt;编写似然度函数&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;现在我们用[4,6,8,12,20]来表示假设：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;([&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;12&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;])&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;接下来我们通过骰子掷出的数字作为数据，似然函数如下：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Dice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#data为得到的投掷结果，hypo是我们的假设
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#意味着骰子的投掷值要大于骰子的面数，显然这不可能
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#可能情况下得到投掷值的概率自然就是1/hypo
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;随着投掷数据的变动，我们可以进一步得到每一个假设的后验概率分布，
先验概率实际上也能看成没有任何事件发生情况下的后验概率。&lt;/p&gt;

&lt;p&gt;接下来，如果我们投掷得到6，就相当于：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;suite.Update(6)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/bayies/3/distribute.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;32-火车头问题&quot;&gt;3.2 火车头问题&lt;/h1&gt;
&lt;p&gt;铁路上以1到N命名火车，有一天你看到一个标号为60的火车头，估计铁路上有多少火车头？
解：可以肯定的是铁路上至少有60个火车头，但这个数字到底是多少？&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;我们可以把问题分成两个步骤&lt;/strong&gt;：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;在得到数据之前，我们对N的认识是什么？（先验概率）&lt;/li&gt;
  &lt;li&gt;已知一个N的任意值后，得到数据(“标志为60号的火车头”)的似然度？（似然度）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;由于缺少前置信息，我们假设，N是从1到1000的等概率的任何值。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#假设
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;其实到这里，应该已经看出来了，我们进入到了跟投掷骰子一样的情况里面。编写似然函数：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#data观察到的火车头编号，hypo是我们的假设
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#意味着观察到的火车头编号要大于火车数量，显然这不可能
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;#可能情况下观察到60号火车头概率自然就是1/hypo
&lt;/span&gt;            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;更新方式如下：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;此时，后去所有假设的可能性可绘制得到：
&lt;img src=&quot;/img/bayies/3/train1.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;可能性最大化的解是60
不过，这还不是我们的目标;另一个可选的方案是计算&lt;strong&gt;后验概率的平均值分布&lt;/strong&gt;,简单点说，就是&lt;strong&gt;期望&lt;/strong&gt;：&lt;/p&gt;

&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;E(火车数量)＝\sum_{i=1}^nhopy_{火车数量i}P(火车数量i)&lt;/script&gt;
可以得到在取假设$[1-1000]$的情况下，我们能得到期望为333。&lt;/p&gt;

&lt;h1 id=&quot;33-怎样看待先验概率&quot;&gt;3.3 怎样看待先验概率&lt;/h1&gt;

&lt;p&gt;如果细看上面的火车头问题的话，会发现我们的假设是非常武断的&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;我们的假设区间的先验假设是平均分布的&lt;/li&gt;
  &lt;li&gt;当选择1000作为上界时，期望值是333;
选择500作为上界时，期望值是207;
选择2000为上界时，期望值是552。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;strong&gt;结论：猜测结果对上界敏感&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;有两种方法可以进一步减小我们误差：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;获取更多的数据。（更多的数据，基于不同的先验分布，后验分布会趋于收敛）&lt;/li&gt;
  &lt;li&gt;更多的背景资料（先验概率）&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;就比如，我们看到了3个火车头，分别诉30，60，90。再更新分布可得其期望：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;上限&lt;/th&gt;
      &lt;th&gt;期望&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;500&lt;/td&gt;
      &lt;td&gt;152&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;1000&lt;/td&gt;
      &lt;td&gt;164&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2000&lt;/td&gt;
      &lt;td&gt;171&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;34-其他先验概率&quot;&gt;3.4 其他先验概率&lt;/h1&gt;
&lt;p&gt;如果没有更多的数据，我们就需要是通过收集背景资料来优化先验。
事实上，公司规模的分布往往遵循幂律，这项规律表明，如果少于10个火车头的公司有1000家，100个火车头的公司可能有100家，1000个火车头的公司有10家,10000个火车头的公司可能只有1家。&lt;/p&gt;

&lt;p&gt;数学上，幂律表示公司数量与公司规模成反比，或：
&lt;script type=&quot;math/tex&quot;&gt;PMF(x) ∝ (\frac{1}{x})^a&lt;/script&gt;
其中$PMF(x)$是$x$的概率密度函数，$a$通常是一个接近于1的参数。&lt;/p&gt;

&lt;p&gt;我们可以构造一个服从幂律分布的先验：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#这里继承了Dice，即可以使用Dice的Likelihood函数；重定义__init__函数即可
&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Train&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Dice&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;1.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;**&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;alpha&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/bayies/3/train2.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;
考虑了幂律分布作为背景资料以后，我们可以消除大于700的假设。&lt;/p&gt;

&lt;p&gt;如果基于这种先验概率，在观察到列车30,60,90时，期望分别是：
| 上限 | 期望 |
| —— | —— |
| 500 | 131 |
| 1000 | 133 |
| 2000 | 134 |&lt;/p&gt;

&lt;p&gt;事实上，考虑一个任意大的上界，期望都将收敛到134。
所以基于幂律分布的先验概率是比较现实的，因为它是基于公司规模的一些情况，并且在实际中表现更好。&lt;/p&gt;

&lt;h1 id=&quot;35-置信区间&quot;&gt;3.5 置信区间&lt;/h1&gt;
&lt;p&gt;一旦计算出了后验分布，通过单点估计或区间对后验分布进行总结通常是有用的。
点估计通常使用平均数、中位数或最大似然值；
区间，我们通常需要计算两个值，使得未知量有90%的可能落在两个值之间。这些值定义了一个置信区间。
计算置信区间的简单做法是在后验概率分布中累加其中的概率，并记录对应与概率5%和95%的值。&lt;strong&gt;简单说就概率密度函数的区间积分值为0.9&lt;/strong&gt;。
根据$Pmf$保存的结构，我们只要把概率进行累加即可。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;percentage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;percentage&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;100.0&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prob&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Items&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;prob&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;val&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这个区间可以如下进行输出：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;前面示例中，出现三个火车头，且先验概率呈现幂律分布的火车头问题中$90\%$置信区间为$(91,243)$。如此大的区间确切表明，（尽管期望值已经收敛了）我们任然相当不确定究竟有多少个火车头的存在。&lt;/p&gt;

&lt;h1 id=&quot;36-累计分布函数&quot;&gt;3.6 累计分布函数&lt;/h1&gt;

&lt;p&gt;上一节中，我们为了求算置信区间，两次调用了Percentile函数。如果需要求解多个区间，会导致计算量倍数增长。这里可以进行优化，我们在这里引入&lt;strong&gt;累计分布函数&lt;/strong&gt;$(Cdf)$。
由于包含某个分布的相同信息，$Cdf$和$Pmf$某种程度等价，其优点就算可以有效计算百分位数。
thinkbayes.py文件中就提供将$Pmf$转化为$Cdf$的调用：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;cdf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;MakeCdf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Percentile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;95&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;interval&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Thu, 03 Sep 2020 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%80%9D%E7%BB%B4/2020/09/03/bayies3(%E4%BC%B0%E8%AE%A1)/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%80%9D%E7%BB%B4/2020/09/03/bayies3(%E4%BC%B0%E8%AE%A1)/</guid>
        
        <category>python</category>
        
        
        <category>贝叶斯思维</category>
        
      </item>
    
      <item>
        <title>贝叶斯思维——chapter2（统计计算）</title>
        <description>&lt;h1 id=&quot;21-分布&quot;&gt;2.1 分布&lt;/h1&gt;
&lt;p&gt;在统计上，分布是一组值及其对应的概率。
为了表示Python中的分布，可以使用一个字典映射某个值和对应概率。这里编写类一个$Pmf$类，利用python字典实现功能。&lt;/p&gt;

&lt;p&gt;$Pmf$定义在thinkbayes.py文件中。&lt;/p&gt;

&lt;p&gt;要使用$Pmf$，可如下导入：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kn&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;thinkbayes.py&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pmf&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;下面代码建立一个$Pmf$来表示六面骰子的结果分布：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;mf&quot;&gt;6.0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这里实际上也可以换种表达方式：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;6&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Incr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#这个函数对概率进行归一化
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最后，我们可以这样获取某个值的概率：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Prob&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;22-盒子中的红球&quot;&gt;2.2 盒子中的红球&lt;/h1&gt;

&lt;p&gt;我们在1.4章节中提到过这个问题。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;假设有两个盒子，盒子A有3个红球和1个白球，盒子B有2个红球和2个白球。现在我们闭上眼睛选择一个盒子并抽取一个球，球为红色。问： 这个球来自盒子A的概率？&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在看一下，如何用上文提到的$Pmf$来解决这个问题。
首先给出取球前的先验概率：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Pmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'boxA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'boxB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;现在开始更新数据（拿到一个红球），我们将先验乘以似然度。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'boxA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'boxB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;更新以后的数据没有归一化，由于假设互斥且完备，这里可以直接重新归一化。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;可得，后验概率为：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;print&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Proc&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'boxA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.6&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;23-贝叶斯框架&quot;&gt;2.3 贝叶斯框架&lt;/h1&gt;
&lt;p&gt;这一节实际上在泛化上文中的python代码。
重新封装$Pmf$:&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;Pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Ball类继承自Pmf，简化了初始化函数，&lt;code class=&quot;highlighter-rouge&quot;&gt;__init__&lt;/code&gt;方法为每个先验赋予相同的先验。&lt;/p&gt;

&lt;p&gt;此时，之前盒子取球问题的初始化简化为：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'boxA'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'boxB'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Ball&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Ball类提供类Update方法, 似然度由Likelihood计算。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;c1&quot;&gt;#mixes变量用于保存似然度
&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mixes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'boxA'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.75&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.25&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;'boxB'&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;white&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;mix&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mixes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mix&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Values&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Mult&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;like&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Normalize&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;更新数据（取球操作）&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;如果从一个盒子中多次有放回的进行取球&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'red'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'white'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]:&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pmf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;24-monty-hall难题&quot;&gt;2.4 Monty Hall难题&lt;/h1&gt;
&lt;p&gt;问题可以参考1.6节中的猜苹果。
既然2.3节中使用的是泛化的代码，这个问题一样可以使用，但这个问题的似然度获取函数需要重写。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Likelihood&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'A'&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;：&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#选择A盒子（apple），我只能在排除B或者C盒
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mf&quot;&gt;0.5&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;elif&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#选择B或者C，我不可能排除B或者C
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#选择B或者C，我只能排除C或者B，因为A盒有apple
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h1 id=&quot;25-封装框架&quot;&gt;2.5 封装框架&lt;/h1&gt;
&lt;p&gt;显然，从上文的框架中，我们可以进一步进行抽象。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Suite&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Pmf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#代表一套假设和概率
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#初始化假设的先验
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Update&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#更新基于该数据的每个假设
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Print&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#输出所有假设和概率
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Suite的实现在thinkbayes.py中，如果要使用需要编写一个继承自Suite的类，并补充Likelihood方法实现。&lt;/p&gt;

&lt;h1 id=&quot;26-巧克力豆问题&quot;&gt;2.6 巧克力豆问题&lt;/h1&gt;
&lt;p&gt;首先，对AB包装的巧克力豆颜色进行封装：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;mix1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;grey&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;30&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;tan&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;mix2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;blue&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;24&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;green&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;orange&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;yellow&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;14&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;red&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;brown&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;封装假设：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hypoA&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bag1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mix1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bag2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mix2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;hypoB&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;bag1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mix2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bag2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mix1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;用假设的名字来映射含义：&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;hypos&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;dict&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;A&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypoA&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;B&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hypoB&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;最后来编写Likelihood函数：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;def Likelihood(self, data, hypo):
    bag, color = data
    mix = hypos[hypo][bag]
    like = mix[color]
    return like
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;更新数据的代码如下：&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;suite.Update(('bag1', 'yellow'))
suite.Update(('bag2', 'green'))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
</description>
        <pubDate>Tue, 01 Sep 2020 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%80%9D%E7%BB%B4/2020/09/01/bayies2(%E7%BB%9F%E8%AE%A1%E8%AE%A1%E7%AE%97)/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%80%9D%E7%BB%B4/2020/09/01/bayies2(%E7%BB%9F%E8%AE%A1%E8%AE%A1%E7%AE%97)/</guid>
        
        <category>python</category>
        
        
        <category>贝叶斯思维</category>
        
      </item>
    
      <item>
        <title>贝叶斯思维——chapter1（贝叶斯定理）</title>
        <description>&lt;h1 id=&quot;14-贝叶斯定理&quot;&gt;1.4 贝叶斯定理&lt;/h1&gt;
&lt;p&gt;假设有两个盒子，盒子A有3个红球和1个白球，盒子B有2个红球和2个白球。现在我们闭上眼睛选择一个盒子并抽取一个球，球为红色。&lt;strong&gt;问：&lt;/strong&gt; 这个球来自盒子A的概率？&lt;/p&gt;

&lt;p&gt;正面解这个问题，我们可能需要借助于表格。这里采用&lt;strong&gt;贝叶斯定理&lt;/strong&gt;。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(A|R) = \frac{P(A and R) = P(A)P(R|A)}{P(R)}&lt;/script&gt;

&lt;p&gt;我们用R代表球是红色的概率，A代表球来自盒子A的概率。&lt;/p&gt;

&lt;p&gt;公式右侧，&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;P(A)这里不考虑球的影响，表示选中盒子A的概率。由于是随机选择，值为$1/2$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;P(R)这里表示从任意一个碗中得到红球的概率。选择盒子的概率是相同的，值为$5/8$&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;P(R|A)表示从盒子A中抽到红球的概率，值为$3/4$&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;结果为$3/5$。&lt;/p&gt;

&lt;h1 id=&quot;15-历时诠释&quot;&gt;1.5 历时诠释&lt;/h1&gt;
&lt;p&gt;还有另外一种理解贝叶斯定理的思路:它给我们提供的是一种根据数据集D的内容变化更新假设概率H的方法。
这种对贝叶斯定理的理解被称为 &lt;strong&gt;“历时诠释”&lt;/strong&gt;。
“历时”意味着某些事情随着时间而发生；在本例，即是假设的概率随着看到的新数据而变化。
在考虑H(假设)和D(数据)的情况下，贝叶斯定理的表达式可以改写成:&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;P(H|D) = \frac{P(H)P(D|H)}{P(D)}&lt;/script&gt;

&lt;p&gt;在这种解释里，每项意义如下:
$p(H)$称为&lt;strong&gt;先验概率&lt;/strong&gt;，即在&lt;strong&gt;得到新数据前某一假设的概率&lt;/strong&gt;。
$p(H|D)$称为&lt;strong&gt;后验概率&lt;/strong&gt;，即在&lt;strong&gt;看到新数据后，我们要计算的该假设的概率&lt;/strong&gt;。
$p(D|H)$是该假设下得到这一数据的概率，称为&lt;strong&gt;似然度&lt;/strong&gt;。
$p(D)$是在任何假设下得到这一数据的概率，称为&lt;strong&gt;标准化常量&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;有些情况，我们可以基于现有背景信息进行计算。&lt;/p&gt;

&lt;p&gt;在盒子的问题中，仅有两个假设：红球来自盒子A或者盒子B，他们是互斥和完备的。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;互斥：集合中，至多一个假设为真。
完备的：集合中，至少一个假设为真，且集合包含了所有假设。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这种解释下，$p(H)$明确为$1/2$，$p(D|H)$为某个盒子中获取红球的概率，$p(D)$可以通过全概率公式获取。
&lt;script type=&quot;math/tex&quot;&gt;P(D) = P(A1)P(D|A1) + P(A2)P(D|A2)&lt;/script&gt;&lt;/p&gt;

&lt;h1 id=&quot;16-例子&quot;&gt;1.6 例子&lt;/h1&gt;
&lt;p&gt;&lt;img src=&quot;/img/bayies/1/mm_bean.jpg&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/bayies/1/monty_hall.png&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 01 Sep 2020 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%80%9D%E7%BB%B4/2020/09/01/bayies1(%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86)/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/%E8%B4%9D%E5%8F%B6%E6%96%AF%E6%80%9D%E7%BB%B4/2020/09/01/bayies1(%E8%B4%9D%E5%8F%B6%E6%96%AF%E5%AE%9A%E7%90%86)/</guid>
        
        <category>python</category>
        
        
        <category>贝叶斯思维</category>
        
      </item>
    
      <item>
        <title>《洞穴奇案》</title>
        <description>&lt;p&gt;洞穴奇案是著名法学家富勒提出的一宗假想公案，是一宗同类相食案，并涉及大众民意、法律与道德关系、紧急避险抗辩、法官职责、自我防卫、生命的绝对价值、故意杀人等内容。他以五位法官的观点反映了五种不同的法哲学流派。后来萨伯再次以此法案为基础，以九个法官的视角提出九种额外的观点。此案曾被达玛窦称为法学经典，并成为西方法学院学生必读文本。&lt;/p&gt;

&lt;p&gt;这个案例是富勒以一些真实案例为基础而假想出来的，可以看出富勒在这些案例中借用了大量事实，比如陷入绝境、人吃人、紧急避难抗辩、抽签、赦免的可能等。但他也在此基础上增添了另外的因素，他把事件从海上移到山洞中，以及细节的增加，十名营救人员的牺牲，无线设备的使用，医疗专家给出的意见，威特莫尔的反复无常等都给这起案件蒙上了更加复杂的色彩。正是由于富勒对事实的裁剪使得判决无罪和判决有罪皆拥有了足够的理由。而这两种类型的大部分法官都确信事实是不平衡的，但最终的判决结果是由法哲学平衡而并非事实不平衡所决定的。无疑，这起案件及法官们的判决引起了我们对法律思想多样性的思考。&lt;/p&gt;

&lt;p&gt;书中罗列了富勒和萨伯两人共&lt;strong&gt;十四个观点&lt;/strong&gt;，反映了20世纪各流派的法哲学思想。我认为，这些观点集中体现了&lt;strong&gt;三种矛盾&lt;/strong&gt;。一是法律与道德的取舍，二是四名被告的行为是否构成紧急避险，三是一命换多命划算，还是生命具有绝对价值。&lt;/p&gt;

&lt;h1 id=&quot;三个矛盾&quot;&gt;三个矛盾&lt;/h1&gt;

&lt;h2 id=&quot;法律与道德的取舍&quot;&gt;法律与道德的取舍&lt;/h2&gt;

&lt;p&gt;“‘任何人故意剥夺了他人的生命都必须被判处死刑。’尽管同情心会促使我们体谅这些人当时所处的悲惨境地，但法律条文不允许任何例外”，特鲁派尼坚持尊重法律条文，但同时他又建议寻求行政长官的特赦。这既表明法律不应被道德所牵制，又表明法律应适当考虑道德。特鲁派尼法官的这种看法虽被某些流派认为是墨守原文，但他提出的特赦又进一步证明道德与法律并非不可兼存，在严守法律基础上的道德实施有可能能让正义得到更好的实现。&lt;/p&gt;

&lt;p&gt;尽管四名被告的行为的确违反了法律，的确应该受到惩罚。但在营救过程中，有十名营救人员因山崩而死亡，若判处四名被告死刑，十名营救人员为他们而死又显得荒谬至极。但又无足够理由判处其无罪。不论做出哪种判决，必然都不能令人信服，因此判决便成为一种两难。当理性判决与道德出现冲突，判决将难以实行。&lt;/p&gt;

&lt;p&gt;但也有法官认为，法律与道德是独立的。基恩法官就指出，个人道德观念并非法官所应考虑，法官应尊重自己的岗位，严格依照法律规定实行判决。只有这样才能防止法律规范的瓦解，更好地发挥法律的作用。伯纳姆法官在此基础上指出在多元化社会没有一种道德观被官方视为最优，因此只有守护法律才是尊重人民，在法律外寻找正义本身就毫无依据。&lt;/p&gt;

&lt;p&gt;与之相反，汉迪法官则认为只有统治者、被统治者和法官情感一致时，法律才可能保持弹性。而民意在很大意义上又是由道德所决定的，因此遵从民意即体现了法律即道德的思想。&lt;/p&gt;

&lt;h2 id=&quot;紧急避险抗辩是否成立&quot;&gt;紧急避险抗辩是否成立&lt;/h2&gt;

&lt;p&gt;紧急避险，又称“紧急避难”。是指为了使公共利益、本人或者他人的人身和其他权利免受正在发生的危险，不得已而采取的损害较小的另一方的合法利益，以保护较大的合法权益的行为。其成立条件为：（1）为了保护公共利益、本人或者他人的合法权益免受危险的损害。（2）客观上具有正在发生的真实危险。（3）迫不得已而采取的行为。（4）不能超过必要的限度而造成不应有的危害。&lt;/p&gt;

&lt;p&gt;认为紧急避险抗辩不成立的，理由有如下几点：（1）四名被告危险准备不足。（2）选择被害人有欠公平。（3）受害者欲再等一周，表明杀人非迫不得已而采取的行为。（4）除杀人外，有可以替代的不会造成如此重大危害的方法。&lt;/p&gt;

&lt;p&gt;认为紧急避险抗辩成立的，理由有如下几点：（1）身处困境实为天意，非四名被告之过错。（2）据专家意见可知，四名被告的饥饿程度已达到能够致死的地步。（3）四名被告已得到专家的意见，杀人食肉是其为生存而不得不采取的行为。（4）杀人是生存的唯一选择。&lt;/p&gt;

&lt;p&gt;就我个人而言，也难以确定紧急避险抗辩是否成立。一方面，四名被告当时处于饿死的危险之中，且杀人食肉的确是四名被告为了保护自身合法权益免受危险而采取的行为；另一方面，四名被告完全可以采取其它危害更小的方法来应对危险，杀人食肉并非迫不得已而采取的行为且这一行为超过了必要的限度而造成了不应有的危害。&lt;/p&gt;

&lt;p&gt;在这个问题上，我们应注意几点：（1）将紧急避险制定在一个技术性原则下是不妥的，（2）紧急避险本身是为法律的不正义找一个出口，不能因为受害者无辜就推翻紧急避险。&lt;/p&gt;

&lt;h2 id=&quot;关于平等一命换多命还是生命具有绝对价值&quot;&gt;关于平等（一命换多命还是生命具有绝对价值）&lt;/h2&gt;

&lt;p&gt;书中有一处细节 “其中一次山崩更夺走了十名营救人员的生命”，用十名营救人员的生命换来四名被告的存活，如果直接就判处死刑，显得对牺牲者的生命十分不负责，也显得荒谬不已。&lt;/p&gt;

&lt;p&gt;塔利法官以为，抽签比直接选择最虚弱者更为公平，把探险者的生命置于一个平等起点上，但他却忽略了抽签的目的是为了让赢家有理由杀人食肉，结果造成了更大的不平等。正如特朗派特法官所言，这种观点无异于扭曲平等来正当化不平等。&lt;/p&gt;

&lt;p&gt;塔利法官又指出以一换五是一宗“预防性杀人”，是一宗划算的交易。而特朗派特法官则针锋相对地表示，每个生命都具有平等的价值。在未征得威特莫尔同意的情况下，四名被告杀人食肉的做法无疑侵犯了其合法权利。每个人都有义务面对死亡，都不能违反最高道德和和法律义务去杀害他人。&lt;/p&gt;

&lt;h1 id=&quot;十四个观点&quot;&gt;十四个观点&lt;/h1&gt;

&lt;h2 id=&quot;观点一尊重法律条文赞成有罪&quot;&gt;观点一：尊重法律条文。（赞成有罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;“任何人故意剥夺了他人的生命都必须被判处死刑。”尽管同情心会促使我们体谅这些人当时所处的悲惨境地，但法律条文不允许有任何例外。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被告虽有罪，但应获得行政赦免。假如的确如此，正义将得到实现，而不会损害我们法典的字义或精神，也不会鼓励任何漠视法律的行为。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点二探究立法精神赞成无罪&quot;&gt;观点二：探究立法精神。（赞成无罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;案发时他们不在联邦法律管辖下，而是在自然法之下（这些人不是处于“文明社会的状态”）。联邦法律（即实定法，与自然法相对）是建立在人们在社会中可以共存这一可能性上的，法律存在的理由停止时，法律也随之停止；&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一个人可以违反法律的表面规定而不违反法律本身。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点三法律与道德的两难弃权&quot;&gt;观点三：法律与道德的两难。（弃权）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;以自然法为依据何其荒谬：&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;一是在何种程度下这些人超越了实体法的约束范围？因为饥饿？被岩石囚禁？通过了新的政府宪章？没有明确的标准和清晰度边界；&lt;/p&gt;

&lt;p&gt;二是合同法比惩罚谋杀的法律具有更高的效力。根据此一规则，个人有权订立有效的协定授权他人把自己的身体当作食物，并且此种协定一旦达成就不能撤销，如果有当事人之一试图撤回，其他人可以掌控法律，用暴力强制执行协定。&lt;/p&gt;

&lt;p&gt;假如试图撤回协定者在反抗其他人的强制执行时无意杀害对方，也不能要求免责，因为这和被判死刑者杀死合法判处他绞刑的法官一样，不属于正当防卫。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;法律的目的是什么？&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;刑事立法被公认的目的之一是威慑，问题在于刑法还有为人民报复的本能提供一个有序的出口、矫正犯罪分子等功能，如果我们必须根据法律的目的来解释法律，当法律有许多目的或者这些目的有争议时，我们该如何处理？&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;饥饿不能成为杀人的理由。如果一开始威特莫尔就不同意此协定，多数人是否可以否决他的意见？或者假定根本没有计划，其他人只是杀害了威特莫尔，并以他身体最虚弱来证明他们的行为是正当的？又或者采取其他办法决定受害者。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点四维持法治传统赞成有罪&quot;&gt;观点四：维持法治传统（赞成有罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;从立法至上原则引申出来的是法官有义务忠实适用法律条文，根据法律的平实含义来解释法律，不能参考个人的意愿或个人的正义观念。如果被宣判有罪，行政赦免不是法官该回答的；不应该讨论这些人的作为的善恶问题。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如果要对自我防卫免责事由进行修改，必须借助自然哲学家及心理学家，而不是我们的司法和学术意见所产生的咬文嚼字和形而上学的混杂。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点五以常识来判断赞成无罪&quot;&gt;观点五：以常识来判断（赞成无罪）&lt;/h2&gt;

&lt;p&gt;应该听取公众的意见，而九成以上的公众不会判处被告们有罪，并且行政长官很可能不会赦免被告们的罪行。&lt;/p&gt;

&lt;h2 id=&quot;观点六撇开己见赞成有罪&quot;&gt;观点六：撇开己见（赞成有罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;对立法机关而言，法律和道德不可分离，对司法机关而言，法律和道德相互独立。立法机关禁止谋杀有其道德动机：它认为谋杀是错误的，因此禁止它……但是，人民不允许法官们适用自己的道德观点。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当法律与道德冲突时，法官的角色就是守护法律。公民可以向行政长官请愿要求行政赦免，向立法机关游说改革法律，批评检察官，事后批评陪审团，在报刊文章里发泄怨气等，但作为法官，我们必须遵守法律。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;法律无关同情。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;紧急避难抗辩并不成立：一是威特莫尔想在执行协议前再等一个星期，即使这个想法是错误的，也至少说明这些被告人在杀人当天并没有面临十万火急的紧急避难；二是饥饿不能构成紧急避难。“联邦诉沃尔金案”的判决已表明既然一个人不能为了防止饥饿实施相对无害的偷面包行为，那我们当然也无法容忍为了避免饥饿而有意杀人并食用人肉；三是减轻饥饿并不只有杀人一种选择，还包括等最虚弱的人自然死亡、吃掉自己的身体末端（如手指、脚趾、耳垂等）、尝试重新恢复无线电联络、再等几天；四是那些由于自己的选择或者疏忽造成危险的人不能运用紧急避难抗辩。（到山地探险本来就是一项危险的活动，而探险者们无视了这个问题，并且没有带上足够的给养）；五是选择被害人有失公平。在掷骰子之前，威特莫尔撤回了同意，这削弱了紧急避难的抗辩，而且他的撤回本身即使毫无根据或者不够理性，也削弱了选择程式的公正性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;“法律在很多方面不同于理想中的正义，其中之一是，法律体现了特定时刻特定民族同意用来统治自己的理想正义，为了确保这种同意，法律必须接受每个人都个体理想所达成的诸多妥协。”&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点七判断的酌情权赞成无罪&quot;&gt;观点七：判断的酌情权（赞成无罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;本案紧急避难的确信合理。被告采取紧急避难在当时是合理的，因为是根据专家意见作出的，并没有建立在他们自己对于生命的预期之上。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;饥饿在本案中可作为一种紧急避难。本案与沃尔金案的区别：首先，沃尔金可能并不是一直在挨饿，我们不知道他所认为的紧急避难的极限何在；其次，他并没有专家的意见来支持他的紧急避难确信；第三，除了犯罪，沃尔金还有其他选择，如乞讨、找一份工作。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;当时情形下杀人是生存唯一的选择。“一个处境危险的人所合理相信的，比一个检察官用事后诸葛之见所认为合理的要多得多。”&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;身处危境不是被困者之过错。探险者并没有选择要被山崩埋在地下，也不是由于自己的疏忽而被埋到里边的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;食物匮乏非疏忽大意造成。探险者不可能预见这场山崩从而携带超出计划需求的给养。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;受害人的同意无关紧要。如果一种随机的抽签是选择受害人的公平方法，那么受害人的同意是无关紧要的。此案中，紧急避难的基础是牢靠的，虽然其理由不够强大，但其反对意见也不够充分。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;惩罚被告有悖法律的目的。惩罚被告并不会阻止别人在将来也不幸陷入相同的困境当中。尽管在大多数杀人案件中都有一种天然的报复需求，但是众所周知本案并没有这样一种需求。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;刑罚适用的问题。即使先前的观点都是无效的，我们也必须让关于谋杀的法律条文之中的那一部分规定归于无效，它规定死刑是所有谋杀犯的唯一惩罚，而不考虑他们之间在心理状态和行为情状上的根本差异。即使被告人是有罪的，他也罪不至死。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点八一命换多命赞成无罪&quot;&gt;观点八：一命换多命（赞成无罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;我们赦免那些自我防卫杀人者意味着，杀人行为本身并不是我们通过关于谋杀的法律力图惩罚的恶事。而且，因为自我防卫杀人也有可能是有目的的，所以甚至连有意识地杀人本身也不是我们力图惩罚的恶事。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一命换多命是一项划算的“交易”。被告们有目的地杀人完全是预防性的，如果不如此的话，六个人早已全部死亡。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;选择杀人好过等待自然死亡。等待第一个人自然死亡的确会使得杀人成为不必要，但这一选择并不比抽签更公平，因为第一个自然死亡的始终是“最弱者”。选择牺牲者的方法是公平的，因为它是随机的，而不是因为它是经过各方同意的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;平等地承担死亡是公平的。威特莫尔撤回同意不是他退出抽签的正当理由，他的退出将会增加其他人退出的压力，并因此增加破坏整个抽签计划的可能性。但那样所增加的，是将目标锁定在成员中最弱的人身上的机会，而不是增加平均分配风险的可能性。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;紧急避难同样适用。杀人行为之所以是正当的，不是因为它缺乏故意，而是因为，即使他们的那种选择是有目的、深思熟虑的或者故意的，公共政策也支持选择较小的恶而不是较大的恶。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本案中紧急避难比行政赦免更适用。一是紧急抗辩在法官和法院可控的范围之内；二是紧急避难不仅是仁慈的，而且还是公正的；三是紧急避难是法律，人民和各党派都期待我们遵守它；它具有公共的、可供裁决的标准；它在公开的法庭上被争论。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点九动机与选择赞成无罪&quot;&gt;观点九：动机与选择（赞成无罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;探险者们在明知道情况下有意识地杀了人，但是那并不意味着他们故意杀了人。相反，显而易见，他们是在没有故意的情况下杀了人。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;基于紧急避难的杀人是正当的。自我防卫是紧急避难的一种，自我防卫法律的新近发展允许自我防卫者可以先发制人而不必等到即刻的死亡或者严重人身伤害。威特莫尔是无辜的，是极度的饥饿，而不是威特莫尔的过错使得杀掉一个人成为必要。被告们是基于紧急避难而杀人的，因此必须被判未犯谋杀罪。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;主张永久性地推翻沃尔金案。原因如下：在实际中，私人慈善机构或者联邦政府并不会给他们提供更多的选择，所以如沃尔金那样的穷人除偷窃之外别无选择。饥饿是最为重要的一种紧急避难，如果它不能在法律之内得到缓解，那么在法律之外寻求解决便没有可受谴责的犯罪意图。相反，这种紧急避难包含着一种不容侵犯的求生意愿，而这种意愿是先于法律而存在的。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;如何评估紧急避难：恰当的紧急避难判断标准不是从我们的判例中寻得的表述精确的规则或者我们自己力图精确表述的规则，而是要带着勇气和公正去估量被告人试图用非法行为所要避免的不正义。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;没有目的地惩罚毫无意义。对于一个没有邪恶意图的被告人，报应是不恰当的。一个有罪判决并不会阻止其他人在今后做出同样的行为。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;我们永远也不会有充分的证据去估量洞里的人杀人时的心理状态，但是我们拥有充分的证据去合理地怀疑他们是否有故意。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;一个观点存在分歧的最高法院表明至少一名法官认为合理怀疑是存在的，应该通过与无效审理相似的、可以称为无效上诉审来阻止有罪判决的做出。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;现实社会并不像伯纳姆法官讲述的那样（观点六第二条），现实社会并不是一个多元化、充分理性和公平的社会，而是一个一些观点和利益支配着其他观点和利益的社会。只要情况确实如此，求诸法律之外的正义是让法律符合正义要求的唯一希望所在。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点十生命的绝对价值赞成有罪但案件应发回重审&quot;&gt;观点十：生命的绝对价值（赞成有罪，但案件应发回重审）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;在法律看来，每一个生命都是极其崇高和无限珍贵的。这让每个生命具有平等的价值。没有哪一个生命可以超过其他生命。任何牺牲都必须是自愿的，否则就是侵犯了法律所确认的生命平等和神圣尊严。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;抽签本身是公平的，但其目的却是为了赢家的利益而杀掉输家，这一目标是在实施终极意义上的不平等。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;忍受不正义好过实施不正义。即便为了保全自己的性命有必要杀人，正义也从来没有要求我们去杀人。正义要求我们面对死亡，而不是去杀害别人。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;杀人永远不是“划算”的交易。如果为了挽救五个人杀掉一个人，为了挽救一百万人而杀掉一个人。但是他会为了五个人杀掉四个人吗？为了一百万人杀掉九十九万呢？所有的生命都具有无限的价值，那么一个生命与两个生命就是同样珍贵的，与一百万个生命相比亦是如此。在预防性杀人中永远都没有划算的交易；有的只是手上带着鲜血的幸存者。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;支持死刑的原则并没有生命神圣原则那么重要，因此应废除规定强制性死刑的法律条文条款。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点十一契约与认可赞成有罪&quot;&gt;观点十一：契约与认可（赞成有罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;被害人撤回同意的行为不容忽视。被害人的同意并不等同于被告们的确信。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被告须为自己的行为负责。他们自愿地走进一个布满危险的自然环境之中，可以预见在那里他们应对灾难的选择范围是狭窄的。他们之所以这样做不是为了避免死亡或采集食物，而只是为了娱乐。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;被害人自我防卫的权利。紧急避难并不适用于本案，或者说也不适用于任何非自我防卫杀人行为。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;无罪判决可能会导致悲剧重复发生。加入被告们早已确切地知晓杀人将会导致被处死，那他们杀死朋友的唯一理由就不会存在了，因为那样他们就会知道杀害他们的朋友并不会挽救他们的生命，反而会使他们的死成为定局。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;相信惩罚一个被告会威慑到其他人，就像相信我们能跳过一个三米宽的深渊一样。认为它是这样并不会让它的确如此，但是认为它不是这样会使它的确不如此。&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;理性与情感不应截然分离。帕斯卡尔：没有理性的法律是荒谬可憎的；而受限于理性的法律是不公平的和可憎的。少年感情，理性只能建造出死寂的营地，而缺少理性，感情就难以找到有效方式坚持不渝。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点十二设身处地赞成无罪&quot;&gt;观点十二：设身处地（赞成无罪）&lt;/h2&gt;

&lt;p&gt;假如法官发现自己在惩罚一个不比自己坏的人，他应该辞职。如果惩罚被告的法官都是在惩罚不比自己坏的人，那无疑是法律的耻辱。&lt;/p&gt;

&lt;h2 id=&quot;观点十三判决的道德启示赞成有罪&quot;&gt;观点十三：判决的道德启示（赞成有罪）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;严格惩罚犯罪是预防犯罪最有效的手段。对所有实施了受禁止行为的人都进行惩罚，可以实现三个目标：一是我们将会把大街上的危险分子一扫而光；二是我们会缩短审判时间，让惩罚来得更为迅速且少有遗漏；三是我们将会有力地阻止其他人做出同样的行为。同惩罚的严厉性相比，惩罚的迅捷性和必然性在防止犯罪方面更为有力。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;废除免责事由有助于减少犯罪。对心理免责事由的继续承认会加剧问题，即使它们有理由，也是源于次要社会政策的，它没有保护公民免受犯罪侵害的社会政策那么重要。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;本案是一种“囚徒困境”。这是背叛者（被告们）利用笨蛋（受害者）的经典案例。只有判处有罪才能使背叛的成本不断攀升，直到超过合作乃至做笨蛋的成本。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;意识形态不应左右法律。在观点九中，海伦法官试图通过推翻“联邦诉沃尔金案”来强化紧急避难抗辩。她反对沃尔金案是因为该案立足于坏的意识形态而非法律，还是因为它立足于坏的意识形态而非好的意识形态呢？她的这种观点并非法律，而只是一项政治建言，是一种政治意识形态。因此，如果她反对沃尔金案是因为它是意识形态的，那么她亦必须反对自己的替代方案。如果她反对沃尔金案是因为它是坏蛋意识形态，那就承认了自己的选择也仅仅是另外一种意识形态。无论哪一种，她都削弱了自己的建议。&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;回应观点十二：根据这种观点，要想有效地实现正义，法官必须要成为天使。法律的首要假定就是法官也是凡人，法官不需要拥有罪犯所缺少的品质。他们所需要的品质，是清晰准确地理解法律，并勇敢和前后一贯地适用法律。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;观点十四利益冲突回避&quot;&gt;观点十四：利益冲突（回避）&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;法律允许负责地适用自由裁量权。雷肯法官（观点十三）认为海伦法官（观点九）点结论反映了她的政治意识形态而不是当下的法律，那么他的关于废除心理免责事由的建议、对于无例外严格责任规则的偏爱，乃至他赋予减少犯罪目标的优先性又是什么呢？&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;新“社会契约”源自被当前法律的拒绝。在被告们向外界询问无果时就拒绝了纽卡斯国的法律，转而制定了他们自己的法律。&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;在这十四种观点中，我们可以看到法律思想的多样性，尊重法律条文、法律与道德、生命的绝对价值、紧急避险抗辩、契约与认可、法律精神、法官职责、自我防卫，从不同的角度出发，得出的结论不尽相同。尽管此案是一宗假想案，判决结果也众说纷纭，但从中我们不仅可以学习到大量法律知识，还能培养自己多层次、多角度、多方面思考问题的能力&lt;/p&gt;
</description>
        <pubDate>Sun, 17 May 2020 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/reading/2020/05/17/%E6%B4%9E%E7%A9%B4%E5%A5%87%E6%A1%88/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/reading/2020/05/17/%E6%B4%9E%E7%A9%B4%E5%A5%87%E6%A1%88/</guid>
        
        <category>book</category>
        
        <category>转载</category>
        
        
        <category>reading</category>
        
      </item>
    
      <item>
        <title>blktrace/blk 追踪者</title>
        <description>&lt;h1 id=&quot;简介&quot;&gt;简介&lt;/h1&gt;
&lt;p&gt;如下图可知整个Block I/O框架可以分为三层：VFS、Block和I/O设备驱动。
&lt;img src=&quot;/img/perf/blockIOFramework.png&quot; alt=&quot;blockIOFramework&quot; /&gt;
Linux内核中提供了跟踪Block层操作的手段，可以通过blk跟踪器、或者使用blktrace/blkparse/btt工具抓取分析、或者使用block相关trace events记录。
blktrace的原理&lt;/p&gt;

&lt;p&gt;一个I/O请求进入block layer之后，可能会经历下面的过程：&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Remap: 可能被DM(Device Mapper)或MD(Multiple Device, Software RAID) remap到其它设备
Split: 可能会因为I/O请求与扇区边界未对齐、或者size太大而被分拆(split)成多个物理I/O
Merge: 可能会因为与其它I/O请求的物理位置相邻而合并(merge)成一个I/O
被IO Scheduler依照调度策略发送给driver
被driver提交给硬件，经过HBA、电缆（光纤、网线等）、交换机（SAN或网络）、最后到达存储设备，设备完成IO请求之后再把结果发回。
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt; Q-------&amp;gt;G------------&amp;gt;I---------&amp;gt;M-------------------&amp;gt;D-----------------------------&amp;gt;C
 |-Q time-|-Insert time-|
 |--------- merge &lt;span class=&quot;nb&quot;&gt;time&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;------------&lt;/span&gt;|-merge with other IO|
 |----------------scheduler &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;time-------------------|---driver,adapter,storagetime--|
 
 |----------------------- await &lt;span class=&quot;nb&quot;&gt;time &lt;/span&gt;&lt;span class=&quot;k&quot;&gt;in &lt;/span&gt;iostat output &lt;span class=&quot;nt&quot;&gt;----------------------------------&lt;/span&gt;|
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Wed, 25 Mar 2020 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/linux/2020/03/25/blktrace/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/linux/2020/03/25/blktrace/</guid>
        
        <category>blktrace</category>
        
        <category>perf</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>tracepoint_of_Block_Layer</title>
        <description>&lt;h1 id=&quot;基本概念及流程&quot;&gt;基本概念及流程：&lt;/h1&gt;
&lt;p&gt;bio 代表一个IO 请求。
request 是bio 提交给IO调度器产生的数据，一个request 中放着顺序排列的bio。
当设备提交bio 给IO调度器时，IO调度器可能会插入bio，或者生成新的request。
request_queue代表着一个物理设备，顺序的放着request。&lt;/p&gt;
&lt;h2 id=&quot;request的数据结构&quot;&gt;request的数据结构&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/perf/requestQ.png&quot; alt=&quot;requeststruct&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;request的种类&quot;&gt;request的种类&lt;/h2&gt;
&lt;p&gt;IO从块设备层（block IO layer），到发送到块设备驱动（device driver）整个过程经过三类队列：&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;unplug request queue 属于线程 current-&amp;gt;plug&lt;/li&gt;
  &lt;li&gt;elevator queue 调度队列，不同的调度器，队列不同&lt;/li&gt;
  &lt;li&gt;device request queue 派遣队列，dispatch queue。（例如，在deadline_dispatch_requests中实现） 该queue即针对设备的，每个设备都有独有的request queue&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;plug和unplug：目的是让请求不马上被驱动程序处理。设备处于pluged状态，设备不会被激活。处于unplugged状态，被激活。
来自上层的请求，先尝试合并入unplug 队列，若不能合并，则调用elv_merge合并入调度队列elevator queue（elv_merge的后两种req的获取途径都是从elevator queue中得到）。若找不到可合并的请求，则获得一个空请求request，用该bio初始化该request，然后放到unplug队列中&lt;/p&gt;
&lt;h2 id=&quot;request的流动&quot;&gt;request的流动&lt;/h2&gt;
&lt;p&gt;一个request在送往设备之前会被放入到每个设备所对应的request queue。其实，通过分析一个IO在elevator层其实会经过很多request queue，不同的request queue会有不同的作用。
&lt;img src=&quot;/img/perf/requestLevel.jpg&quot; alt=&quot;requestLevel&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;biorequest的提交流程&quot;&gt;bio/request的提交流程&lt;/h1&gt;

&lt;h2 id=&quot;task自有的蓄流层&quot;&gt;task自有的蓄流层&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/perf/blk_queue_bio.png&quot; alt=&quot;blk_queue_bio&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;调用generic_make_request，维护当前的bio链表，调用bdev_get_queue获取设备的request_queue，调用blk_partition_remap检查目标设备是否是一个磁盘分区，如果是个分区，则需要做转化；&lt;/li&gt;
  &lt;li&gt;调用request_queue的make_request_fn函数，将bio插入到request_queue中；&lt;/li&gt;
  &lt;li&gt;调用blk_init_allocated_queue阶段绑定的blk_queue_bio来处理第2步传递的bio；
    &lt;ol&gt;
      &lt;li&gt;如果因为硬件限制bio的地址范围和io驱动的数据交互，调用blk_queue_bounce创建bounce buffer来转移bio；&lt;/li&gt;
      &lt;li&gt;如果某些原因，例如bio横跨设备边界，调用blk_queue_split将一个bio分割成两个，重新调用generic_make_request处理分割的bio；，调用blk_attempt_plug_merge将bio合并到当前线程的plugged蓄流链表中，遍历request_queue的plug_list链表中的request；&lt;/li&gt;
      &lt;li&gt;请求队列允许合并(QUEUE_FLAG_NOMERGES标记)，调用blk_attempt_plug_merge将bio合并到当前线程的plugged蓄流链表中，遍历request_queue的plug_list链表中的request；
        &lt;ol&gt;
          &lt;li&gt;如果发现可以合并的request；&lt;/li&gt;
          &lt;li&gt;调用bio_attempt_back_merge或bio_attempt_front_merge进行合并；
&lt;img src=&quot;/img/perf/bio_merge.png&quot; alt=&quot;bio_merge&quot; /&gt;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;请求队列不允许合并，申请request_queue的queue_lock，调用调度器的elv_merge函数，进行bio的合并；
&lt;img src=&quot;/img/perf/elv_merge.png&quot; alt=&quot;elv_merge&quot; /&gt;&lt;/li&gt;
      &lt;li&gt;合并失败的处理逻辑比较简单：调用get_request为bio分配一个新的request结构，注意：这里可能会阻塞(sleep)；&lt;/li&gt;
      &lt;li&gt;如果task的蓄流功能启动；
        &lt;ol&gt;
          &lt;li&gt;蓄流链表plug_list为空，启动plug_trace；&lt;/li&gt;
          &lt;li&gt;蓄流链表有如果不为空，且超过MAX_REQUEST_COUNT的阈值，调用blk_flush_plug_list，向调度层提交request,启动plug_trace；&lt;/li&gt;
          &lt;li&gt;将新请求的request添加到plug_list链表中;&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
      &lt;li&gt;task的蓄流功能未启动，直接提交bio到调度层的request；&lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;elevator调度层&quot;&gt;elevator调度层&lt;/h2&gt;
&lt;p&gt;&lt;img src=&quot;/img/perf/blk_flush_plug_list.png&quot; alt=&quot;blk_flush_plug_list&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;蓄流层的request数量超过阈值以后开始进行request的提交，blk_flush_plug_list会遍历蓄流链表中的每个request，然后将每个request通过_elv_add_request接口添加到elecator调度队列中，添加的过程中会尝试与调度队列中已有的request进行合并。
    &lt;ol&gt;
      &lt;li&gt;对蓄流链表中的request进行排序&lt;/li&gt;
      &lt;li&gt;从蓄流链表中摘下一个request，将request合入到elevator中。对于第一个摘下的request，执行queue_unplug操作。
        &lt;ol&gt;
          &lt;li&gt;调用elv_add_request将request插入到elevator的调度队列中&lt;/li&gt;
          &lt;li&gt;添加的过程中会尝试与调度队列中已有的request进行合并，先让蓄流的request调用elv_attempt_insert_merge尝试与调度队列中的request合并，如果不能合并则落入到ELEVATOR_INSERT_SORT分支&lt;/li&gt;
        &lt;/ol&gt;
      &lt;/li&gt;
    &lt;/ol&gt;
  &lt;/li&gt;
  &lt;li&gt;当调度器需要发送request时，会调用elevator_dispatch_fn。该函数会直接从调度器所管理的request queue中获取一个request，然后调用elv_dispatch_sort函数将请求加入到设备所在的request queue中(dispatch分发层)，该函数可以对request进行排序，插入到合适的位置。
&lt;img src=&quot;/img/perf/unplug.png&quot; alt=&quot;unplug&quot; /&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;设备驱动dispatch分发层&quot;&gt;设备驱动——dispatch分发层&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;通过调用elevator的elevator_dispatch_fn函数向dispatch分发层提交request&lt;/li&gt;
  &lt;li&gt;通过调用 run_queue 的方法将 elevator 分类处理过的 request 转移至 device request queue 中，最后调用 scsi_dispatch_cmd 方法将请求发送到 HBA 。&lt;/li&gt;
  &lt;li&gt;在这个过程有一些问题需要处理：底层设备可能存在故障； HBA 的处理队列是有长度限制的。因此，如何连续调度 device request queue 及重新调度 request 成了一个需要考虑的问题。在 Linux 中，如果 scsi 层需要重新调度一个 request，可以通过 blk_requeue_request 接口来完成。通过该接口，可以把 request 重新放回到 device request queue 中。另外，在一个 request 结束之后的回调函数中，需要通过 scsi_run_queue 函数来再次调度处理 device request queue 中的剩余请求，从而可以保证批量处理 device request queue 中的请求， HBA 也一直运行在最大的 queue depth 深度。&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;block层的trace-events&quot;&gt;block层的trace events&lt;/h1&gt;
&lt;p&gt;在linux procfs的/sys/kernel/debug/tracing/events/block下，可以看到以下block相关的事件。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root/block/blk-core.c
├── block_getrq &amp;lt;- __get_request&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#get a free request&lt;/span&gt;
├── block_sleeprq &amp;lt;- get_request&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#get a free request&lt;/span&gt;
├── block_rq_requeue &amp;lt;- blk_requeue_request&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
|# Description:
|#    Drivers often keep queueing requests &lt;span class=&quot;k&quot;&gt;until &lt;/span&gt;the hardware cannot accept
|#    more, when that condition happens we need to put the request back
|#    on the queue.
├── block_bio_frontmerge &amp;lt;- bio_attempt_front_merge&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
├── block_bio_backmerge &amp;lt;- bio_attempt_back_merge&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
├── block_plug &amp;lt;- blk_queue_bio&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
├── block_unplug &amp;lt;- blk_flush_plug_list&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;&lt;span class=&quot;c&quot;&gt;#queue_unplug&lt;/span&gt;
├── block_bio_queue	&amp;lt;- generic_make_request_checks&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
├── block_bio_remap &amp;lt;- blk_partition_remap&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
├── block_rq_issue &amp;lt;- blk_peek_request&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
└── block_rq_complete &amp;lt;- blk_update_request&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

root/block/blk.c  
└── block_bio_complete &amp;lt;- bio_endio&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

root/fs/buffer.c 
├── block_touch_buffer
└── block_dirty_buffer

root/block/bounce.c
└── block_bio_bounce &amp;lt;- blk_queue_bounce&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; 

root/block/elevator.c&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;blk-mq-sched.c&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;blk-mq.c&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
└── block_rq_insert &amp;lt;- __elv_add_request&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

root/block/blk-merge.c
└── block_split &amp;lt;- blk_queue_split&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;

root/drivers/md/dm-rq.c
└── block_rq_remap &amp;lt;- map_request&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;内核空间里面主要是给块层IO路径上的关键点添加tracepoint,然后借助于relayfs系统特性将收集到的数据写到buffer去。此时，我们来使能block的tracepoint&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;root@openmv:/sys/kernel/debug/tracing# &lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; set_event
root@openmv:/sys/kernel/debug/tracing# &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; events/block/enable 
root@openmv:/sys/kernel/debug/tracing# &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; events/printk/enable 
root@openmv:/sys/kernel/debug/tracing# &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;nomarkers &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; trace_options 
root@openmv:/sys/kernel/debug/tracing# &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;1 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; tracing_on 
root@openmv:/sys/kernel/debug/tracing# &lt;span class=&quot;nb&quot;&gt;echo &lt;/span&gt;0 &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; trace      
root@openmv:/sys/kernel/debug/tracing# &lt;span class=&quot;nb&quot;&gt;cat &lt;/span&gt;trace_pipe &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; /home/re.txt
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;打开&lt;code class=&quot;highlighter-rouge&quot;&gt;/home/re.txt&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-t&quot;&gt;#                              _-----=&amp;gt; irqs-off
#                             / _----=&amp;gt; need-resched
#                            | / _---=&amp;gt; hardirq/softirq
#                            || / _--=&amp;gt; preempt-depth
#                            ||| /     delay
#           TASK PID   CPU#  ||||    TIMESTAMP  FUNCTION
#              |  |      |   ||||       |         |
     jbd2/sda1-8-533   [000] .... 396695.376685: block_bio_remap: 8,0 FWFS 3905554656 + 8 &amp;lt;- (8,1) 3905552608
     jbd2/sda1-8-533   [000] .... 396695.376696: block_bio_queue: 8,0 FWFS 3905554656 + 8 [jbd2/sda1-8]
     jbd2/sda1-8-533   [000] .... 396695.376709: block_getrq: 8,0 FWFS 3905554656 + 8 [jbd2/sda1-8]
     jbd2/sda1-8-533   [000] d... 396695.376716: block_rq_insert: 8,0 FWFS 0 () 3905554656 + 8 [jbd2/sda1-8]
     ksoftirqd/3-23    [003] dns. 396695.377109: block_rq_issue: 8,0 WFS 0 () 3905554656 + 8 [ksoftirqd/3]
     ksoftirqd/3-23    [003] ..s. 396695.377480: block_rq_complete: 8,0 WFS () 3905554656 + 8 [0]
&lt;/code&gt;&lt;/pre&gt;

</description>
        <pubDate>Thu, 19 Mar 2020 00:00:00 -0500</pubDate>
        <link>http://0.0.0.0:4000/linux/2020/03/19/trace_event_of_blk/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/linux/2020/03/19/trace_event_of_blk/</guid>
        
        <category>kernel</category>
        
        <category>trace</category>
        
        <category>block</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>iostat源码解析</title>
        <description>&lt;p&gt;iostat命令是报告cpu的统计信息和磁盘的i/o统计信息。iostat命令通过观察存储设备实际的工作时间和它们的平均传输率来监控系统的i/o负载。
这个不需要root权限，数据来源可以直接通过访问procfs获取。&lt;/p&gt;
&lt;h1 id=&quot;基本用法和输出的基本含义&quot;&gt;基本用法和输出的基本含义&lt;/h1&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iostat &lt;span class=&quot;nt&quot;&gt;-d&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;-x&lt;/span&gt; 1#表示显示设备状态，显示扩展信息，每秒输出一次
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/perf/iostat.png&quot; alt=&quot;iostat&quot; /&gt;&lt;/p&gt;
&lt;h2 id=&quot;iostat指标解读&quot;&gt;iostat指标解读&lt;/h2&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;性能指标&lt;/th&gt;
      &lt;th&gt;含义&lt;/th&gt;
      &lt;th&gt;提示&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;Device&lt;/td&gt;
      &lt;td&gt;显示设备或者分区的Name&lt;/td&gt;
      &lt;td&gt;这些设备可以在/dev下找到&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r/s&lt;/td&gt;
      &lt;td&gt;每秒发送给磁盘的请求数&lt;/td&gt;
      &lt;td&gt;合并后的请求数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;w/s&lt;/td&gt;
      &lt;td&gt;每秒发送给磁盘的请求数&lt;/td&gt;
      &lt;td&gt;合并后的请求数&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rkB/s&lt;/td&gt;
      &lt;td&gt;每秒从磁盘读取的数据量&lt;/td&gt;
      &lt;td&gt;单位为kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wkB/s&lt;/td&gt;
      &lt;td&gt;每秒向磁盘写入的数据量&lt;/td&gt;
      &lt;td&gt;单位为kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rrqm/s&lt;/td&gt;
      &lt;td&gt;每秒合并的读请求数&lt;/td&gt;
      &lt;td&gt;%rrqm表示合并读请求的百分比&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wrqm/s&lt;/td&gt;
      &lt;td&gt;每秒合并的写请求数&lt;/td&gt;
      &lt;td&gt;%wrqm表示合并写请求的百分比&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;r_await&lt;/td&gt;
      &lt;td&gt;读请求处理完成等待时间&lt;/td&gt;
      &lt;td&gt;包括队列中的等待时间和设备实际处理的时间，单位ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;w_await&lt;/td&gt;
      &lt;td&gt;写请求处理完成等待时间&lt;/td&gt;
      &lt;td&gt;包括队列中的等待时间和设备实际处理的时间，单位ms&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;aqu-sz&lt;/td&gt;
      &lt;td&gt;平均请求队列长度&lt;/td&gt;
      &lt;td&gt;旧版本中为avgqu-sz&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;rareq-sz&lt;/td&gt;
      &lt;td&gt;平均读请求大小&lt;/td&gt;
      &lt;td&gt;单位为kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;wareq-sz&lt;/td&gt;
      &lt;td&gt;平均写请求大小&lt;/td&gt;
      &lt;td&gt;单位为kB&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;svctm&lt;/td&gt;
      &lt;td&gt;处理IO请求所需的平均时间&lt;br /&gt;（不包括等待时间）&lt;/td&gt;
      &lt;td&gt;单位为毫秒&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;%util&lt;/td&gt;
      &lt;td&gt;磁盘处理IO的时间百分比&lt;/td&gt;
      &lt;td&gt;即使用率，由于可能存在并行IO，100%不表明磁盘IO饱和&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;h1 id=&quot;iostat数据来源diskstats&quot;&gt;iostat数据来源diskstats&lt;/h1&gt;
&lt;p&gt;这里的数据来源指的是/proc/diskstats
&lt;img src=&quot;/img/perf/diskstats.png&quot; alt=&quot;diskstats&quot; /&gt;&lt;/p&gt;

&lt;p&gt;iostat是以/proc/diskstats为基础计算出来的，这是前提。而且很多查IO的方法都是通过/proc/diskstats为基础计算出来的。&lt;/p&gt;

&lt;p&gt;由于/proc/diskstats并未把队列等待时间和硬盘处理时间分开，所以凡是以它为基础的工具都不可能分别提供disk service time以及与queue有关的值。&lt;/p&gt;

&lt;p&gt;这里举&lt;code class=&quot;highlighter-rouge&quot;&gt;sda&lt;/code&gt;为例&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;8 0 sda 63147 32179 3914580 61983 287312 216951 7881680 434138 0 190628 267912 0 0 0 0
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;每个参数对应的含义:
前3个字段分别代表major, minor, device; 后面的15个字段含义如下：&lt;/p&gt;

&lt;table&gt;
  &lt;thead&gt;
    &lt;tr&gt;
      &lt;th&gt;index&lt;/th&gt;
      &lt;th&gt;Name&lt;/th&gt;
      &lt;th&gt;units&lt;/th&gt;
      &lt;th&gt;description&lt;/th&gt;
    &lt;/tr&gt;
  &lt;/thead&gt;
  &lt;tbody&gt;
    &lt;tr&gt;
      &lt;td&gt;1&lt;/td&gt;
      &lt;td&gt;read I/Os&lt;/td&gt;
      &lt;td&gt;requests&lt;/td&gt;
      &lt;td&gt;number of read I/Os processed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;2&lt;/td&gt;
      &lt;td&gt;read merges&lt;/td&gt;
      &lt;td&gt;requests&lt;/td&gt;
      &lt;td&gt;number of read I/Os merged with in-queue I/O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;3&lt;/td&gt;
      &lt;td&gt;read sectors&lt;/td&gt;
      &lt;td&gt;sectors&lt;/td&gt;
      &lt;td&gt;number of sectors read&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;4&lt;/td&gt;
      &lt;td&gt;read ticks&lt;/td&gt;
      &lt;td&gt;milliseconds&lt;/td&gt;
      &lt;td&gt;total wait time for read requests&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;5&lt;/td&gt;
      &lt;td&gt;write I/Os&lt;/td&gt;
      &lt;td&gt;requests&lt;/td&gt;
      &lt;td&gt;number of write I/Os processed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;6&lt;/td&gt;
      &lt;td&gt;write merges&lt;/td&gt;
      &lt;td&gt;requests&lt;/td&gt;
      &lt;td&gt;number of write I/Os merged with in-queue I/O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;7&lt;/td&gt;
      &lt;td&gt;write sectors&lt;/td&gt;
      &lt;td&gt;sectors&lt;/td&gt;
      &lt;td&gt;number of sectors written&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;8&lt;/td&gt;
      &lt;td&gt;write ticks&lt;/td&gt;
      &lt;td&gt;milliseconds&lt;/td&gt;
      &lt;td&gt;total wait time for write requests&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;9&lt;/td&gt;
      &lt;td&gt;in_flight&lt;/td&gt;
      &lt;td&gt;requests&lt;/td&gt;
      &lt;td&gt;number of I/Os currently in flight&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;10&lt;/td&gt;
      &lt;td&gt;io_ticks&lt;/td&gt;
      &lt;td&gt;milliseconds&lt;/td&gt;
      &lt;td&gt;total time this block device has been active&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;11&lt;/td&gt;
      &lt;td&gt;time_in_queue&lt;/td&gt;
      &lt;td&gt;milliseconds&lt;/td&gt;
      &lt;td&gt;total wait time for all requests&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;12&lt;/td&gt;
      &lt;td&gt;discard I/Os&lt;/td&gt;
      &lt;td&gt;requests&lt;/td&gt;
      &lt;td&gt;number of discard I/Os processed&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;13&lt;/td&gt;
      &lt;td&gt;discard merges&lt;/td&gt;
      &lt;td&gt;requests&lt;/td&gt;
      &lt;td&gt;number of discard I/Os merged with in-queue I/O&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;14&lt;/td&gt;
      &lt;td&gt;discard sectors&lt;/td&gt;
      &lt;td&gt;sectors&lt;/td&gt;
      &lt;td&gt;number of sectors discarded&lt;/td&gt;
    &lt;/tr&gt;
    &lt;tr&gt;
      &lt;td&gt;15&lt;/td&gt;
      &lt;td&gt;discard ticks&lt;/td&gt;
      &lt;td&gt;milliseconds&lt;/td&gt;
      &lt;td&gt;total wait time for discard requests&lt;/td&gt;
    &lt;/tr&gt;
  &lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;这里面大部分字段都是很容易理解的，稍微难理解的在于io_ticks。初看之下，明明已经有了rd_ticks和wr_ticks 为什么还需一个io_ticks。注意rd_ticks和wr_ticks是把每一个IO消耗时间累加起来，但是硬盘设备一般可以并行处理多个IO，因此，rd_ticks和wr_ticks之和一般会比自然时间（wall-clock time）要大。而io_ticks 不关心队列中有多少个IO在排队，它只关心设备有IO的时间。即不考虑IO有多少，只考虑IO有没有。在实际运算中，in_flight不是0的时候保持计时，而in_flight 等于0的时候，时间不累加到io_ticks。&lt;/p&gt;

&lt;h2 id=&quot;内核中的数据结构&quot;&gt;内核中的数据结构&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;path: root/include/linux/blk_types.h
enum stat_group {
    STAT_READ,
    STAT_WRITE,
    STAT_DISCARD,

    NR_STAT_GROUPS
};

path: root/include/linux/genhd.h
struct disk_stats {
    u64 nsecs[NR_STAT_GROUPS];
    unsigned long sectors[NR_STAT_GROUPS];
    unsigned long ios[NR_STAT_GROUPS];
    unsigned long merges[NR_STAT_GROUPS];
    unsigned long io_ticks;
    unsigned long time_in_queue;
    local_t in_flight[2];
};

path: root/block/genhd.c
static int diskstats_show(struct seq_file *seqf, void *v)
{
    struct gendisk *gp = v;
    struct disk_part_iter piter;
    struct hd_struct *hd;
    char buf[BDEVNAME_SIZE];
    unsigned int inflight;
 
    /*
    if (&amp;amp;disk_to_dev(gp)-&amp;gt;kobj.entry == block_class.devices.next)
        seq_puts(seqf,  &quot;major minor name&quot;
                         &quot;     rio rmerge rsect ruse wio wmerge &quot;
                         &quot;wsect wuse running use aveq&quot;
                         &quot;\n\n&quot;);
    */
 
    disk_part_iter_init(&amp;amp;piter, gp, DISK_PITER_INCL_EMPTY_PART0);
    while ((hd = disk_part_iter_next(&amp;amp;piter))) {
        inflight = part_in_flight(gp-&amp;gt;queue, hd);
        seq_printf(seqf, &quot;%4d %7d %s &quot;
                    &quot;%lu %lu %lu %u &quot;
                    &quot;%lu %lu %lu %u &quot;
                    &quot;%u %u %u &quot;
                    &quot;%lu %lu %lu %u\n&quot;,
                    MAJOR(part_devt(hd)), MINOR(part_devt(hd)),
                    disk_name(gp, hd-&amp;gt;partno, buf),
                    part_stat_read(hd, ios[STAT_READ]),
                    part_stat_read(hd, merges[STAT_READ]),
                    part_stat_read(hd, sectors[STAT_READ]),
                    (unsigned int)part_stat_read_msecs(hd, STAT_READ),
                    part_stat_read(hd, ios[STAT_WRITE]),
                    part_stat_read(hd, merges[STAT_WRITE]),
                    part_stat_read(hd, sectors[STAT_WRITE]),
                    (unsigned int)part_stat_read_msecs(hd, STAT_WRITE),
                    inflight,
                    jiffies_to_msecs(part_stat_read(hd, io_ticks)),
                    jiffies_to_msecs(part_stat_read(hd, time_in_queue)),
                    part_stat_read(hd, ios[STAT_DISCARD]),
                    part_stat_read(hd, merges[STAT_DISCARD]),
                    part_stat_read(hd, sectors[STAT_DISCARD]),
                    (unsigned int)part_stat_read_msecs(hd, STAT_DISCARD),
                );
    }
    disk_part_iter_exit(&amp;amp;piter);
 
    return 0;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&quot;用户态iostat的数据结构&quot;&gt;用户态iostat的数据结构&lt;/h2&gt;
&lt;p&gt;用户态程序打开&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/diskstats&lt;/code&gt;文件，将数据填入到&lt;code class=&quot;highlighter-rouge&quot;&gt;struct io_stats&lt;/code&gt;的结构中。&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;/*
 * Structures for I/O stats.
 * These are now dynamically allocated.
 */
struct io_stats {
	/* # of sectors read */
	unsigned long rd_sectors	__attribute__ ((aligned (8)));
	/* # of sectors written */
	unsigned long wr_sectors	__attribute__ ((packed));
	/* # of sectors discarded */
	unsigned long dc_sectors	__attribute__ ((packed));
	/* # of read operations issued to the device */
	unsigned long rd_ios		__attribute__ ((packed));
	/* # of read requests merged */
	unsigned long rd_merges		__attribute__ ((packed));
	/* # of write operations issued to the device */
	unsigned long wr_ios		__attribute__ ((packed));
	/* # of write requests merged */
	unsigned long wr_merges		__attribute__ ((packed));
	/* # of discard operations issued to the device */
	unsigned long dc_ios		__attribute__ ((packed));
	/* # of discard requests merged */
	unsigned long dc_merges		__attribute__ ((packed));
	/* Time of read requests in queue */
	unsigned int  rd_ticks		__attribute__ ((packed));
	/* Time of write requests in queue */
	unsigned int  wr_ticks		__attribute__ ((packed));
	/* Time of discard requests in queue */
	unsigned int  dc_ticks		__attribute__ ((packed));
	/* # of I/Os in progress */
	unsigned int  ios_pgr		__attribute__ ((packed));
	/* # of ticks total (for this device) for I/O */
	unsigned int  tot_ticks		__attribute__ ((packed));
	/* # of ticks requests spent in queue */
	unsigned int  rq_ticks		__attribute__ ((packed));
};
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&quot;采集数据到显示数据的计算&quot;&gt;采集数据到显示数据的计算&lt;/h1&gt;
&lt;p&gt;通过获取的数据，我们可以直接得到以下信息。&lt;/p&gt;
&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;r/s
w/s
rkB/s
wkB/s
rrqm/s
wrqm/s
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;这几项的计算是非常简单的，就是采样两次，后一次的值减去前一次的值，然后除以时间间隔，得到平均值即可。因为这些/proc/diskstats中对应的值都是累加的，后一次减去前一次，即得到采样时间间隔内的新增量。不赘述。&lt;/p&gt;
&lt;h2 id=&quot;r_wait和w_wait的计算&quot;&gt;r_wait和w_wait的计算&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;xios.r_await = (ioi-&amp;gt;rd_ios - ioj-&amp;gt;rd_ios) ?
				       (ioi-&amp;gt;rd_ticks - ioj-&amp;gt;rd_ticks) /
				       ((double) (ioi-&amp;gt;rd_ios - ioj-&amp;gt;rd_ios)) : 0.0;

xios.w_await = (ioi-&amp;gt;wr_ios - ioj-&amp;gt;wr_ios) ?
				       (ioi-&amp;gt;wr_ticks - ioj-&amp;gt;wr_ticks) /
				       ((double) (ioi-&amp;gt;wr_ios - ioj-&amp;gt;wr_ios)) : 0.0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;r\_await = （间隔期间所有读IO花费的时间）/（间隔期间读请求的个数） \\
w\_await = （间隔期间所有写IO花费的时间）/（间隔期间写请求的个数）&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;aqu-sz-平均队列深度的计算&quot;&gt;aqu-sz 平均队列深度的计算&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;//其中rq_ticks即diskstats中的time_in_queue，注意这里的1000是ms-&amp;gt;s
#define S_VALUE(m,n,p)		(((double) ((n) - (m))) / (p) * 100)
S_VALUE(ioj-&amp;gt;rq_ticks, ioi-&amp;gt;rq_ticks, itv) / 1000.0);
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;这里看下内核的实现：&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;path: root/drivers/md/dm-stats.c

    difference = now - shared-&amp;gt;stamp;
    if (!difference)
        return;
 
    in_flight_read = (unsigned)atomic_read(&amp;amp;shared-&amp;gt;in_flight[READ]);
    in_flight_write = (unsigned)atomic_read(&amp;amp;shared-&amp;gt;in_flight[WRITE]);
    if (in_flight_read)
        p-&amp;gt;io_ticks[READ] += difference;
    if (in_flight_write)
        p-&amp;gt;io_ticks[WRITE] += difference;
    if (in_flight_read + in_flight_write) {
        p-&amp;gt;io_ticks_total += difference;
        p-&amp;gt;time_in_queue += (in_flight_read + in_flight_write) * difference;
    }
    shared-&amp;gt;stamp = now;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;strong&gt;举个栗子&lt;/strong&gt;：&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;当第一个IO完成的时候，队列中250个IO，250个IO都等了4ms，即time_in_queue + = (250 * 4) ，当第二个IO完成的时候，time_in_queue += (249 * 4)，当所有IO都完成的时候，time_in_queue = 4*(250+249+248….+1)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;根据&lt;script type=&quot;math/tex&quot;&gt;time\_in\_queue/1000&lt;/script&gt;,得到了平均队列长度。&lt;/p&gt;

&lt;script type=&quot;math/tex; mode=display&quot;&gt;time\_in\_queue += \Delta t_n * inflight_n \\

aqu\_sz = 间隔时间内inflight的期望值 = \frac{\Delta t_i * inflight_i + ... + \Delta t_j * inflight_j}{\Delta t_i + ... + \Delta t_i}&lt;/script&gt;

&lt;h2 id=&quot;rareq-sz--wareq-sz-平均请求的sector大小&quot;&gt;rareq-sz	&amp;amp; wareq-sz 平均请求的sector大小&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;xios.rarqsz = (ioi-&amp;gt;rd_ios - ioj-&amp;gt;rd_ios) ?
			(ioi-&amp;gt;rd_sectors - ioj-&amp;gt;rd_sectors) / ((double) (ioi-&amp;gt;rd_ios - ioj-&amp;gt;rd_ios)) :
				      0.0;
xios.warqsz = (ioi-&amp;gt;wr_ios - ioj-&amp;gt;wr_ios) ?
			(ioi-&amp;gt;wr_sectors - ioj-&amp;gt;wr_sectors) / ((double) (ioi-&amp;gt;wr_ios - ioj-&amp;gt;wr_ios)) :
				      0.0;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;&lt;script type=&quot;math/tex&quot;&gt;rareq\_sz = (间隔期间读取的sector增长量)/（间隔期间读请求的个数） \\
wareq\_sz = (间隔期间写入的sector增长量)/（间隔期间写请求的个数）&lt;/script&gt;&lt;/p&gt;

&lt;h2 id=&quot;util-磁盘设备饱和度数据不准确&quot;&gt;%util 磁盘设备饱和度(数据不准确)&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;path: root/drivers/md/dm-stats.c
//其中的io_ticks_total即是队列非空的总时间
    difference = now - shared-&amp;gt;stamp;
    if (!difference)
        return;
 
    in_flight_read = (unsigned)atomic_read(&amp;amp;shared-&amp;gt;in_flight[READ]);
    in_flight_write = (unsigned)atomic_read(&amp;amp;shared-&amp;gt;in_flight[WRITE]);
    if (in_flight_read)
        p-&amp;gt;io_ticks[READ] += difference;
    if (in_flight_write)
        p-&amp;gt;io_ticks[WRITE] += difference;
    if (in_flight_read + in_flight_write) {
        p-&amp;gt;io_ticks_total += difference;
        p-&amp;gt;time_in_queue += (in_flight_read + in_flight_write) * difference;
    }
    shared-&amp;gt;stamp = now;
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;最简单的例子是，某硬盘处理单个IO请求需要0.1秒，有能力同时处理10个。但是当10个请求依次提交的时候，需要1秒钟才能完成这10%的请求，，在1秒的采样周期里，%util达到了100%。但是如果10个请一次性提交的话， 硬盘可以在0.1秒内全部完成，这时候，%util只有10%。&lt;/p&gt;

&lt;p&gt;在上面的例子中，一秒中10个IO，即IOPS=10的时候，%util就达到了100%，这并不能表明，该盘的IOPS就只能到10，事实上，纵使%util到了100%，硬盘可能仍然有很大的余力处理更多的请求，即并未达到饱和的状态。&lt;/p&gt;

&lt;p&gt;那么有没有一个指标用来衡量硬盘设备的饱和程度呢。很遗憾，iostat没有一个指标可以衡量磁盘设备的饱和度。&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;明明已经有了rd_ticks和wr_ticks 为什么还需一个io_ticks。注意rd_ticks和wr_ticks是把每一个IO消耗时间累加起来，但是硬盘设备一般可以并行处理多个IO，因此，rd_ticks和wr_ticks之和一般会比自然时间（wall-clock time）要大。而io_ticks 不关心队列中有多少个IO在排队，它只关心设备有IO的时间。即不考虑IO有多少，只考虑IO有没有。在实际运算中，in_flight不是0的时候保持计时，而in_flight 等于0的时候，时间不累加到io_ticks。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;svctm-处理io请求所需的平均时间&quot;&gt;svctm 处理IO请求所需的平均时间&lt;/h2&gt;
&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;    double tput = ((double) (sdc-&amp;gt;nr_ios - sdp-&amp;gt;nr_ios)) * HZ / itv; 
                
    xds-&amp;gt;util = S_VALUE(sdp-&amp;gt;tot_ticks, sdc-&amp;gt;tot_ticks, itv);
    xds-&amp;gt;svctm = tput ? xds-&amp;gt;util / tput : 0.0; 
&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;对于iostat这个功能而言，%util固然会给人带来一定的误解和苦扰，但是svctm给人带来的误解更多。一直以来，人们希望了解块设备处理单个IO的service time，这个指标直接地反应了硬盘的能力。
但是service time和iostat无关，iostat没有任何一个参数能够提供这方面的信息。这个值其实并没有什么意义，事实上，这个值不是独立的，它是根据其他值计算出来的。&lt;/p&gt;

</description>
        <pubDate>Sun, 08 Mar 2020 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/linux/2020/03/08/iostat/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/linux/2020/03/08/iostat/</guid>
        
        <category>iostat</category>
        
        <category>perf</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>iotop源码解析</title>
        <description>&lt;p&gt;iotop 运行在用户态，但io的管理是内核态完成的。iotop的数据统计本质就是不断从内核获取数据。&lt;/p&gt;
&lt;h1 id=&quot;背景知识&quot;&gt;背景知识&lt;/h1&gt;
&lt;h2 id=&quot;linux-pidtgid关系&quot;&gt;Linux pid,tgid关系&lt;/h2&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;                        &lt;span class=&quot;n&quot;&gt;USER&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIEW&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;lt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;-----------------&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-----------------&amp;gt;&lt;/span&gt;
                     &lt;span class=&quot;o&quot;&gt;+---------+&lt;/span&gt;
                     &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
                  &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tgid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; \&lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;
       &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fork&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;_&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;+---------+&lt;/span&gt;                  \
      &lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;                                        &lt;span class=&quot;o&quot;&gt;+---------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+---------+&lt;/span&gt;                                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                                    &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tgid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tgid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;                                    &lt;span class=&quot;o&quot;&gt;+---------+&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;+---------+&lt;/span&gt;
 &lt;span class=&quot;o&quot;&gt;&amp;lt;--&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;43&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;---------&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;42&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;--------&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;---&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;PID&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;44&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;---&amp;gt;&lt;/span&gt;
                        &lt;span class=&quot;n&quot;&gt;KERNEL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;VIEW&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;上图很好地描述了用户视角(user view)和内核视角(kernel view)看到线程的差别：&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;从用户视角出发，在pid 42中产生的tid 44线程，属于tgid(线程组leader的进程ID) 42。甚至用ps和top的默认参数，你都无法看到tid 44线程。&lt;/li&gt;
  &lt;li&gt;从内核视角出发，tid 42和tid 44是独立的调度单元，可以把他们视为”pid 42”和”pid 44”。(内核只有task的概念)&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;举个栗子，本地pid(1832)下的进程树，由&lt;code class=&quot;highlighter-rouge&quot;&gt;pstree&lt;/code&gt;生成。{}表示线程。&lt;code class=&quot;highlighter-rouge&quot;&gt;/proc/pid/task&lt;/code&gt;仅包含线程。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1832&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;─┬─&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26423&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;─┬─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26424&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
 &lt;span class=&quot;n&quot;&gt;tgid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1832&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;tgid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;26423&lt;/span&gt;    &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26425&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                     &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26426&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                     &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26427&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;                     &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26428&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;tgid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1832&lt;/span&gt;       &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26429&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
              &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Dir&lt;/span&gt;          &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26430&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;——│—————————————————&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;   &lt;span class=&quot;err&quot;&gt;└─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;docker&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proxy&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;9413&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1894&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1896&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1897&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1898&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1900&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1907&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1909&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1942&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1947&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1948&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1950&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;├─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2142&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;err&quot;&gt;│&lt;/span&gt;  &lt;span class=&quot;err&quot;&gt;└─&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;dockerd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;}(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;26431&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
           &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;————————————————————&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;进程优先级&quot;&gt;进程优先级&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;PRI&lt;/strong&gt;:进程优先权，代表这个进程可被执行的优先级，其值越小，优先级就越高，越早被执行;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;NI&lt;/strong&gt;:进程Nice值，代表这个进程的优先值;&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;PRI是比较好理解的，即进程的优先级，或者通俗点说就是程序被CPU执行的先后顺序，此值越小进程的优先级别越高。那NI呢？就是我们所要说的nice值了，其表示进程可被执行的优先级的修正数值。PRI值越小越快被执行，那么加入nice值后，将会使得PRI变为：PRI(new)=PRI(old)+nice。由此看出，规则是NICE越小，其进程优先级会变高，则其越快被执行。进程nice值和进程优先级不是一个概念，但是进程nice值会影响到进程的优先级变化。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h1 id=&quot;源码结构解析&quot;&gt;源码结构解析&lt;/h1&gt;

&lt;div class=&quot;language-shell highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;├── iotop
│   ├── data.py
│   ├── genetlink.py
│   ├── __init__.py&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;无内容，不涉及&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│   ├── ioprio.py
│   ├── netlink.py
│   ├── ui.py&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;用户交互部分，不涉及&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│   ├── version.py&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;无内容，不涉及&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
│   └── vmstat.py
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;img src=&quot;/img/perf/iotop.png&quot; alt=&quot;iotop&quot; /&gt;&lt;/p&gt;
&lt;ol&gt;
  &lt;li&gt;数据由taskstats获取,累加所有task得到。&lt;/li&gt;
  &lt;li&gt;数据由vmstat中读取。&lt;/li&gt;
  &lt;li&gt;由ioprio模块提供&lt;/li&gt;
  &lt;li&gt;由data模块，根据pid获取对应的uid&lt;/li&gt;
  &lt;li&gt;通过taskstats获取的task读写信息，其实读写信息通过procfs也能获取，但iodelay的获取过程已经附带了读写信息（个人向）&lt;/li&gt;
  &lt;li&gt;通过taskstats获取的iodelay，如果iodelay为一直0，这里显示为unaviable&lt;/li&gt;
  &lt;li&gt;通过cmdline信息或者status中的name信息提供&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;vmstat模块&quot;&gt;vmstat模块&lt;/h2&gt;
&lt;p&gt;模块中仅包含一个类VmStat，这个类主要负责跟/proc/vmstat文件的交互。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;err&quot;&gt;提供&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;proc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmstat&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的信息&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgpgin&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;以&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KB&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;表示系统从磁盘读入到内存的数据量大小&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;pgpgout&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;以&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;KB&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;表示系统从内存写出到磁盘的数据量大小&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;返回&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgpgin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgpgout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;返回新获取的&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgpgin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgpgout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;之前保存的&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pgpgin&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pgpgout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;差值&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;netlink模块&quot;&gt;netlink模块&lt;/h2&gt;

&lt;p&gt;netlink是一种介于在内核空间与用户空间之间进行数据传输的特殊的通信方式。它通过为为用户程序提供了一组标准的socket 接口，并为内核模块提供一组特殊的API的方式，实现了全双工的通讯连接。类似于TCP/IP使用AF_INET地址族，netlink socket使用另一种地址族AF_NETLINK。&lt;/p&gt;

&lt;p&gt;模块中主要包含类&lt;strong&gt;Connection&lt;/strong&gt;和类&lt;strong&gt;Message&lt;/strong&gt;，为用户态和内核态的数据传输交互提供基础服务。
上层通过Message发送数据，基础服务返回一个Message给上层接口。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;netlink 16字节的协议头&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/perf/netlink.png&quot; alt=&quot;netlink协议头&quot; /&gt;&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;创建&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;type&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_type&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;payload&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;将&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;处理成字符串的形式&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;构造&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;netlink&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;协议头&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;header&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__repr__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#定义Message的打印格式
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'&amp;lt;netlink.Message type=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d, pid=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d, seq=&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;d, flags=0x&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;x &quot;&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;s&quot;&amp;gt;'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
     &lt;span class=&quot;err&quot;&gt;使用协议族&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;AF_NETLINK&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;建立&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;连接&lt;/span&gt;
     &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;groups&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;解构&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;通过&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;socket&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;发送&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;msglen&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;解析返回数据的前&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;个字节&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;初始化一个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;msg_type&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;个字节以后的数据&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#相当于发送信息的编号
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_seq&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;_seq&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;genetlink模块&quot;&gt;genetlink模块&lt;/h2&gt;
&lt;p&gt;模块中主要包含类&lt;strong&gt;GeNlMessage&lt;/strong&gt;和类&lt;strong&gt;Controller&lt;/strong&gt;，用于获取一组特定的数据（协议族信息）。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;GeNlMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#继承于Message
&lt;/span&gt;    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;
    &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;利用传入的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contents&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;初始化一个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;，&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;注意&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;seq&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;信息会在&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;得到更新&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;#静态函数，独立于对象存在
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;msg&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connecttion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;receive&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;初始化的一个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GelMessage&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Controller&lt;/span&gt;
    &lt;span class=&quot;err&quot;&gt;接受一个外部传入的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_family_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;family&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;构建获取&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family_id&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的命令&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTRL_CMD_GETFAMILY&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;初始化一个&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeNlMessage&lt;/span&gt;
        &lt;span class=&quot;err&quot;&gt;调用&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;GeNlMessage&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;父类&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Message&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;send&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;函数&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeNlMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;recv&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;re&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;CTRL_ATTR_FAMILY_ID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;   
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;ioprio模块&quot;&gt;ioprio模块&lt;/h2&gt;
&lt;p&gt;这部分比较粗暴，主要使用就是根据用户输入的pid显示这个task的任务优先级，也可用来设置任务优先级（不常用）。
模块中需要给出不同系统中系统调用号表的编号。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;，这里面是没有aarch64的，CentOS提供的iotop rpm源码包中有相关patch&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;n&quot;&gt;IOPRIO_GET_ARCH_SYSCALL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;443&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'arm*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;315&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'i*86'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ia64*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1275&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'parisc*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;268&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'powerpc*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;274&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s390*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;283&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sparc*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;218&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sh*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;289&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x86_64*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'32bit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;290&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x86_64*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'64bit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;252&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;IOPRIO_SET_ARCH_SYSCALL&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'alpha'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;442&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'arm*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;314&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'i*86'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;        &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;289&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'ia64*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1274&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'parisc*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;     &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;267&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'powerpc*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;273&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'s390*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;       &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;282&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sparc*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;      &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;196&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'sh*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;         &lt;span class=&quot;s&quot;&gt;'*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;mi&quot;&gt;288&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x86_64*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;'32bit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;289&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'x86_64*'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;s&quot;&gt;'64bit'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;251&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioprio&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ioprio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;h2 id=&quot;data模块&quot;&gt;data模块&lt;/h2&gt;
&lt;p&gt;向UI提供数据，这里对Stats需要一下说明：&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;swapin_delay_total: 从发生page fault开始，到完成swapin结束的耗时&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;blkio_delay_total: 从提交同步IO开始，到同步IO返回结束的耗时；blkio_delay_total相关代码如下。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;path: linux/kernel/delayacct.c
int __delayacct_add_tsk(struct taskstats *d, struct task_struct *tsk)
{
    ...
    tmp = d-&amp;gt;blkio_delay_total + tsk-&amp;gt;delays-&amp;gt;blkio_delay;
    d-&amp;gt;blkio_delay_total = (tmp &amp;lt; d-&amp;gt;blkio_delay_total) ? 0 : tmp;
    ... 
    return 0;
}

path: linux/kernel/core.c(blkio_delay的更新)
/*
* This task is about to go to sleep on IO. Increment rq-&amp;gt;nr_iowait so
* that process accounting knows that this is a task in IO wait state.
*/
long __sched io_schedule_timeout(long timeout)
{
    int old_iowait = current-&amp;gt;in_iowait;
    struct rq *rq;
    long ret;
 
    current-&amp;gt;in_iowait = 1;
    blk_schedule_flush_plug(current);
 
    delayacct_blkio_start();
    rq = raw_rq();
    atomic_inc(&amp;amp;rq-&amp;gt;nr_iowait);
    ret = schedule_timeout(timeout);
    current-&amp;gt;in_iowait = old_iowait;
    atomic_dec(&amp;amp;rq-&amp;gt;nr_iowait);
    delayacct_blkio_end();
 
    return ret;
}
EXPORT_SYMBOL(io_schedule_timeout);
&lt;/code&gt;&lt;/pre&gt;
&lt;blockquote&gt;
  &lt;p&gt;cancelled_write_bytes: 这里的数据由truncate引发，截短了cache中的文件，事实上就减少了原本要发生的写I/O&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;read_bytes: 进程读取的物理I/O字节数，包括mmap pagein，在submit_bio()中统计的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;write_bytes: 进程写出的物理I/O字节数，包括mmap pageout，在submit_bio()中统计的&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;现在来看下Stats代码。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Stats主要负责从内核中不断获取以下的5个值
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;members_offsets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'blkio_delay_total'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;40&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'swapin_delay_total'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;56&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'read_bytes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;248&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'write_bytes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;256&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt;
        &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'cancelled_write_bytes'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;264&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#类变量，独立于实例外
&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;has_blkio_delay_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_stats_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#数据被写入到实例内置的字典中
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dict__&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;members_offsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;task_stats_buffer&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;struct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unpack&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'Q'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# This is a heuristic to detect 
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# if CONFIG_TASK_DELAY_ACCT is enabled in
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;# the kernel.
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#注意这里的只要有一次收到的blkio_delay_total非0
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#has_blkio_delay_total就会被置为true
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_blkio_delay_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;has_blkio_delay_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blkio_delay_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;accumulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coeff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Update destination from operator(self, other_stats)&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;dd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dict__&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dict__&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;od&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__dict__&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;offset&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;members_offsets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;dd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sd&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coeff&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;od&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;member&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;other_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Update destination with self - other_stats&quot;&quot;&quot;&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;accumulate&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;other_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;destination&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;coeff&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_all_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#判断内置字典中的5个变量全部为0
&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;@&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;staticmethod&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_all_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#创建一个5个变量全0的Stat实例，并返回
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TaskStatsNetlink&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;object&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NETLINK_GENERIC&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Controller&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family_id&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;controller&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get_family_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;'TASKSTATS'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;c1&quot;&gt;#组装命令获取内核中taskstats的数据
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;build_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;GeNlMessage&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;family_id&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cmd&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TASKSTATS_CMD_GET&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;attrs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;U32Attr&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;TASKSTATS_CMD_ATTR_PID&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)],&lt;/span&gt;
                           &lt;span class=&quot;n&quot;&gt;flags&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;NLM_F_REQUEST&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; 
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_single_task_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#提交组装的命令
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#根据获取某个tid对应的taskstats数据组装一个Stats，并返回
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;ThreadInfo类提供线程优先级和线程级Stats的delta&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ThreadInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;s&quot;&gt;&quot;&quot;&quot;Stats for a single thread&quot;&quot;&quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskstats_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;__new__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;task_stats_request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskstats_connection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_request&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_ioprio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#返回当前线程tid的任务优先级
&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_ioprio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;():&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#设置当恰县城tid的任务优先级
&lt;/span&gt;    
    &lt;span class=&quot;c1&quot;&gt;#self.stats_delta保存新获取的stats - 老的stats(self.stats_total)
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
         &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;not&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
            &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_total&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;既然这个类被命名为ProessInfo，很容易猜到里面会包含类threads成员。&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProcessInfo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;#Stats for a single process (a single line in the output): 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#if options.processes is set, it is a collection of threads, 
&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;#otherwise a singlethread.
&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;uid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;user&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;threads&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;# {tid: ThreadInfo}
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#这里可以看到Process和Thread都有stats_delta
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_all_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#这里的accum实际上就是delta的不断累计
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_accum&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;Stats&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;build_all_zero&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_accum_timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;is_monitored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#通过option的参数判断是后要显示当前进程
&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_uid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#通过pid获取这个task的用户ID
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_user&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#通过uid获取用户名
&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_cmdline&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#这个函数很明显，是为了获取进程的cmdline，
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#注意内核线程是找不到cmdline的，转而会获取status中的name
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;did_some_io&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;accumulated&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#如果delta为0或者accum为0 return false
&lt;/span&gt;    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_ioprio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#获取所有孩子threads的ioprio，取set
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#如果发现set的size大于1，表明ioprio异常
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set_ioprio&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#同thread的set_ioprio
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_thread&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskstats_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#通过tid返回threadInfo，
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#如果不存在这个thread，通过tid和taskstats_conn
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#创建一个threadInfo
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#累计所有的threads的stats_delta到临时tmp_stats中，
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blkio_delay_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nr_threads&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;swapin_delay_total&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nr_threads&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#累计stats_delta到stats_accum中
&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;这个类很明显是为了维护process列表&lt;/p&gt;
&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ProcessList&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;__init__&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskstats_connection&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;# {pid: ProcessInfo}
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;processes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{}&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;taskstats_connection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;taskstats_connection&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmstat&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;vmstat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;VmStat&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;

        &lt;span class=&quot;c1&quot;&gt;# A first time as we are interested in the delta
&lt;/span&gt;        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_process_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
    
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get_process&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pid&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#根据pid从processes中获取processInfo
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#如果不存在这个processInfo，通过pid创建一个
&lt;/span&gt;        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;is_monitored&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;options&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
            &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;process&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list_tgids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#如果option中已经指定了pids，直接返回pids
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#如果oprion中指定process，返回/proc下的所有pid
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#如果option中未指定process，返回所有的task中的pid
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;list_tids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tgids&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#如果option中已经指定了process，直接返回pids
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#tids = 获取指定tgids下的task列表
&lt;/span&gt;        &lt;span class=&quot;c1&quot;&gt;#如果option中指定了pids，合并tids和pids
&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;update_process_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;c1&quot;&gt;#保存该函数调用的时间
&lt;/span&gt;        &lt;span class=&quot;n&quot;&gt;new_timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;time&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;duration&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt;
        &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;timestamp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;new_timestamp&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;进程列表：&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;线程列表：&lt;/span&gt;
                &lt;span class=&quot;err&quot;&gt;获取&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;err&quot;&gt;对应的&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stats_delta&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;total_read&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;read_bytes&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;total_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;write_bytes&lt;/span&gt;
                    &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;False&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;total_read&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_write&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;),&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vmstat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
   
   &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;refresh_processes&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;进程列表：&lt;/span&gt;
            &lt;span class=&quot;n&quot;&gt;foreach&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;线程列表：&lt;/span&gt;
                &lt;span class=&quot;n&quot;&gt;thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;mark&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;True&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;total_read_and_write&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;self&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;update_process_counts&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

</description>
        <pubDate>Sun, 01 Mar 2020 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/linux/2020/03/01/iotop/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/linux/2020/03/01/iotop/</guid>
        
        <category>iotop</category>
        
        <category>perf</category>
        
        
        <category>linux</category>
        
      </item>
    
      <item>
        <title>《贫穷的本质》</title>
        <description>&lt;p&gt;&lt;img src=&quot;/img/books/1000.jpeg&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;诺贝尔经济学家得主&quot;&gt;诺贝尔经济学家得主&lt;/h1&gt;

&lt;p&gt;据诺贝尔奖官网消息，瑞典斯德哥尔摩当地时间14日中午，2019年度诺贝尔奖项中的最后一项，诺贝尔奖经济学奖于瑞典揭晓。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/books/1001.jpeg&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;阿比吉特·班纳吉（Abhijit Banerjee）&lt;/strong&gt;，1961年出生，现任美国麻省理工学院福特基金会国际经济学教授。&lt;/p&gt;

&lt;p&gt;2003年，他与爱人一起创建了Abdul Latif Jameel贫困行动实验室（J-PAL）。&lt;/p&gt;

&lt;p&gt;2009年，JPAL获得了BBVA基金会“知识前沿”发展合作类奖。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;埃丝特·迪弗洛(Esther Duflo)&lt;/strong&gt;，1972年出生，现任美国麻省理工学院阿卜杜勒·拉蒂夫·贾米尔扶贫与发展经济学教授。曾是美国前总统奥巴马经济顾问。没错，楼上的班纳吉的爱人就是迪弗洛。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;迈克尔·克雷默(Michael Kremer)&lt;/strong&gt;，1964年出生，现任职于美国哈佛大学。是美国艺术和科学院院士，麦克阿瑟奖学金和总统学院奖学金的获得者，并被世界经济论坛任命为全球青年领袖。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获奖插曲——经济学者的高冷&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;据说通知当事人获奖事宜时还闹出了不少小插曲，奖项宣布之际是美国时间凌晨，埃斯特·迪弗洛回忆称，收到评委会电话时，自己还未睡醒，“对方念了诺贝尔经济学奖的全称，很长的名字。”埃斯特·迪弗洛笑称，“然后，评委会建议我喝点咖啡醒一醒，他们需要我在不久之后通过电话，接入新闻发布会，回答问题。”&lt;/p&gt;

&lt;p&gt;同期获奖的迪弗洛的老公班纳吉当获悉新闻发布会上只需要一名获奖人出席就可以时，自己就扭头回去补觉了。
而另一位获奖人克雷默平获奖时正在伦敦出差。他先是收到一条Skype短信，称有位瑞典同行急着找自己，一度以为是欺诈短信，后来才发现是瑞典皇家学院发来获奖的贺电。&lt;/p&gt;

&lt;p&gt;这就是经济学家们口中说的“理性人”了吧，感觉高冷的经济学家对这些奖项没有丝毫感觉。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;获奖原因&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;而他们的获奖原因确实也非常重大，诺贝尔奖官方表示：&lt;/p&gt;

&lt;p&gt;三位获奖人研究的如何减贫的主题，是关乎人类命运的重要议题；&lt;/p&gt;

&lt;p&gt;获奖人用试验性的研究方法来寻找可靠解决方案，包括贫困的根源是否被掩盖，如何能够找到更有效的减贫方法；&lt;/p&gt;

&lt;p&gt;三位获奖人的研究经过时间检验，通过干预措施，对减贫起到了实际的效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/books/1003.jpeg&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;h1 id=&quot;贫穷的本质&quot;&gt;贫穷的本质&lt;/h1&gt;

&lt;p&gt;《贫穷的本质：我们为什么摆脱不了贫穷》便是诺贝尔经济学奖得主阿比吉特·班纳吉和埃斯特·迪弗洛合写的研究成果之一。&lt;/p&gt;

&lt;p&gt;这本书已经被看成是研究“贫穷”的巅峰之作。据了解，班纳吉和杜弗洛用了15年的时间踏遍了五大洲、18个国家和地区最贫穷的地方做调研，才有了这本“大成之作”，从而通过贫穷的人的生活、教育、健康等生活的多个维度来探究贫穷产生的真正原因。&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/img/books/1002.jpeg&quot; alt=&quot;此处输入图片的描述&quot; /&gt;&lt;/p&gt;

&lt;p&gt;他们发现处在贫穷状态中的人和普通人在欲望、弱点以及理性的层面上，实则差别不大。&lt;/p&gt;

&lt;p&gt;区别在于，贫困的境遇，导致穷人接受信息的渠道受限，造成许多小错误，并产生恶性循环，&lt;/p&gt;

&lt;p&gt;比如在健康方面，疾病预防工作即使再便宜，穷人也还是不会去做，因为穷人往往缺乏必要的医疗和卫生知识，而且他们更关心生病以后要花多少钱来治，所以往往要等到病发展到一定程度之后才去看医生。&lt;/p&gt;

&lt;p&gt;而这种重视治疗轻预防的态度，不仅让他们一病回到解放前，身体也在饱受摧残。进而影响到了下一代的身体素质，同时根据研究，身体状况较差的孩子上学时间较短，毕业之后的薪水也相对较低，从而开始踏上父辈的老路。&lt;/p&gt;

&lt;p&gt;贫穷，就如此循环往复无法摆脱。&lt;/p&gt;

&lt;p&gt;同时穷人面临的真正问题不是吃不饱饭那么简单，而是没有办法获得全面的营养；没有收入来源自然没有退休计划；不识字于是无法看懂拗口的健康保险产品；没有社会保险、退休金、养老金，于是孩子是养老送终的唯一希望，越穷越生，恶性循环。&lt;/p&gt;

&lt;p&gt;在《贫穷的本质》一书中，两位用了大量实例提出了一些实用性较强的建议，寻找那些经得起检验的扶贫方案，为政策制定者、慈善家、政治家及所有希望天下脱贫的人提供了重要指导。&lt;/p&gt;

&lt;p&gt;愿世界没有贫穷&lt;/p&gt;

&lt;p&gt;感谢他们对人类的所作出的贡献，感谢经济学奖得主进行的研究——减轻全球贫困，大大提高了人们抗击全球贫困的能力。&lt;/p&gt;

&lt;p&gt;我们也希望世界没有贫穷，让更多的人能够拥有一个和谐幸福的生活。&lt;/p&gt;

&lt;p&gt;同时也感谢国家，根据《改革开放40年中国人权事业的发展进步》白皮书，过去40多年中国共减少贫困人口8.5亿多人，对全球减贫贡献率超过70%。&lt;/p&gt;

&lt;h1 id=&quot;什么样的人是真正的穷人呢&quot;&gt;什么样的人是真正的穷人呢？&lt;/h1&gt;
&lt;p&gt;各个国家都有自己的贫困线。按照美国的标准来说，每天消费只能控制在99美分以下的人就是穷人。贫困人群在生活中遇到的困难比我们想象中的还要多，比如社会文化有贬低穷人的习惯，文学作品经常把穷人描绘成又懒又馋的人，这样的误解会带来各种各样的问题。&lt;strong&gt;最大的问题是，我们的许多脱贫政策也是建立在误解之上的&lt;/strong&gt;。&lt;/p&gt;

&lt;p&gt;本书的作者阿比吉特 班纳吉和埃斯特 迪弗洛，他们调查了贫困人群最集中的18个国家和地区，从一系列具体的问题出发，详细解读了我们过去对贫穷和穷人的误解，以及穷人在做选择的时候会遇到的不友善，并提出了解决贫穷问题的具体办法。&lt;/p&gt;

&lt;h1 id=&quot;全书结构&quot;&gt;全书结构&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;第一部分：慈善的误区。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第二部分：贫困群体的困境。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;第三部分：应对贫穷的具体方法。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;第一部分慈善的误区&quot;&gt;第一部分：慈善的误区&lt;/h2&gt;

&lt;p&gt;穷人很难脱贫，主要是因为很多慈善组织的做法是建立在误解的基础上的，没有考虑到穷人真正面临的难题。我们将从饥饿、健康、教育、人口这四个方面来看穷人真正面临的难题，以及这些难题产生的原因。&lt;/p&gt;

&lt;p&gt;首先，很多扶贫政策，往往将贫穷和饥饿这两个词挂钩，认为穷人就是吃不饱饭的人。所以，这些政策会主张直接发粮食。但是，绝大多数人穷人并不是吃不饱饭，穷人面临的真正问题是没有办法获得全面的营养。这会影响到他们下一代的智商和前途，世代无法摆脱贫穷。&lt;/p&gt;

&lt;p&gt;其次，在健康方面，有观点认为只要我们在贫困国家加大公共领域的投资，预防疾病，就可以让穷人更健康。但真实的情况是，预防工作就算再便宜，穷人还是不会去做，他们只关心生病以后要花多少钱来治。&lt;/p&gt;

&lt;p&gt;到了治病的时候，穷人更喜欢那些要价高但只会开抗生素的医生，而不是选择真正有帮助的免费医疗服务。因为大多数穷人都不具备最基本的生理知识，他们听不懂医生的解释，而注射抗生素会让他们立刻感到好转。&lt;/p&gt;

&lt;p&gt;第三，在教育问题上，我们一直以来都有一种错觉，认为穷人家的孩子不上学是因为没钱。事实上，在绝大多数国家，小学、甚至初中都是免费的，但还是有很多孩子不愿意上学。&lt;/p&gt;

&lt;p&gt;穷人的孩子不上学，原因一是学校教育质量低下，老师缺席，高年级的学生还读不懂低年级的课文，上学纯粹是浪费时间。原因二是很多家长不知道教育的好处，因为教育的回报往往是在十几年之后，这让很多家长看不到投资的价值，同时也不想放弃孩子现在能挣到的钱。原因三是我们的学校大多以培养精英为己任，很多孩子在起步阶段就因为赶不上进度而被放弃了，所以很多孩子不喜欢上学。所以，在教育问题上，光建立学校、聘用教师是远远不够的。&lt;/p&gt;

&lt;p&gt;最后，人口问题。有观点认为人口增长会让一个穷国变得更穷，因此，降低生育率会让穷人的境遇变好。很多发展中国家也有相关的人口政策，但是这并没能阻止穷人生更多的孩子。因为穷人一般都没有社会保险、退休金、养老金，对他们而言，孩子是养老送终的唯一希望。所以，他们会越穷越生，恶性循环。&lt;/p&gt;

&lt;h2 id=&quot;第二部分贫困群体的困境&quot;&gt;第二部分：贫困群体的困境&lt;/h2&gt;

&lt;h3 id=&quot;1保险难&quot;&gt;1.保险难&lt;/h3&gt;

&lt;p&gt;贫穷人群在生活中总是面临很多风险，一次旱灾一场暴雨，生个病出个意外，就能让他们的生活陷于困境。但是他们很少买保险。同样，保险公司也很少给这个群体提供服务，原因有三。&lt;/p&gt;

&lt;p&gt;首先，他们很难对穷人进行监督。穷人有了失业保险，可能会故意不好好工作。其次，因为一般来说只有那些觉得自己有危险的人才会参保，所以保险公司为了自己的利益，只能将保费定高一点，这样一来，贫困群体就更犹豫不前。第三，保险公司很难预防那些明目张胆的欺诈行为，所以会倾向于把贫困群体排除在外。&lt;/p&gt;

&lt;h3 id=&quot;2贷款难&quot;&gt;2.贷款难&lt;/h3&gt;

&lt;p&gt;贫困群体常常缺钱，但是他们在借钱的时候，很少选择银行，而是直接去找高利贷。因为银行也对这个群体很不友善。&lt;/p&gt;

&lt;p&gt;银行之所以不愿意接待贫困群体，主要是因为他们贷款金额太小，而要做背景信息调查又要花很多钱，同时，他们违约的几率确实比较大，银行不愿意承担这样的风险。&lt;/p&gt;

&lt;p&gt;于是，贫困群体不得不转向高利贷等非正规渠道去借款，他们的生活也经常因此被拖垮。&lt;/p&gt;

&lt;p&gt;而现在，小额信贷机构看准了这个市场，正在试图通过给穷人提供贷款来解决贫困问题。不过，小额信贷也面临着一些问题，比如贷款的人少，违约率高，利率也高，而且负面新闻缠身。&lt;/p&gt;

&lt;h3 id=&quot;3储蓄难&quot;&gt;3.储蓄难&lt;/h3&gt;

&lt;p&gt;贫困群体有各种各样存钱的办法，比如成立互助小组，大家互相监督；将钱换成东西，为了盖房子，挣到一毛钱就换一块砖，等到攒够一堵墙，就砌起来，然后再用同样的方式攒够剩下的三堵墙和房顶。但是，他们不喜欢去银行存钱。&lt;/p&gt;

&lt;p&gt;原因一，银行的取款手续费太贵了，就比如有些地方取100块就要收两块钱手续费，而利息可能只有一块钱。这样很不划算。&lt;/p&gt;

&lt;p&gt;原因二是自控力的问题。我们的大脑对现在和未来的处理方式是不同的。我们总会觉得明天的自己要比今天的自己更理性，所以我们会在今天买下我们想要的东西，却认为明天我们就会把钱花在更合理的地方。这一点，所有人都一样，只是对穷人而言，自控力差的危害更大些。
4.做生意难&lt;/p&gt;

&lt;p&gt;首先，很难借到钱来扩大规模，又没有保险，风险很大。其次，因为缺少资金，所以只能做些小生意，勉强糊口，赚不了多少钱。第三，为了应对风险，贫困群体往往会从事很多种职业，做生意的同时可能还有别的工作要做，没有精力和愿望扩大生意的规模。&lt;/p&gt;
&lt;h3 id=&quot;4做生意难&quot;&gt;4.做生意难&lt;/h3&gt;

&lt;p&gt;首先，很难借到钱来扩大规模，又没有保险，风险很大。其次，因为缺少资金，所以只能做些小生意，勉强糊口，赚不了多少钱。第三，为了应对风险，贫困群体往往会从事很多种职业，做生意的同时可能还有别的工作要做，没有精力和愿望扩大生意的规模。&lt;/p&gt;

&lt;h2 id=&quot;第三部分如何应对贫困&quot;&gt;第三部分：如何应对贫困&lt;/h2&gt;

&lt;p&gt;要给贫困人群提供正确的信息，让他们做正确的事。比如让他们知道营养的重要，比直接发粮食要好；宣讲卫生健康常识，对他们的健康非常重要。&lt;/p&gt;

&lt;p&gt;政府和慈善机构应当适当地助推，给贫困人群提供便利，比如政府补贴，银行降低取款收费，保险公司免费给穷人提供保险。&lt;/p&gt;

&lt;p&gt;要推动小的社会变革，减少腐败和玩忽职守，让对贫困人群有益的政策能够落实下去。&lt;/p&gt;

&lt;p&gt;最重要的一点是：要改变穷人的信念。有时候，人们之所以能做成一件事，就是因为他们相信自己能行。因此，对穷人而言，拥有脱贫的信念是很重要的，这会激发他们去做很多事，来让自己摆脱贫穷。&lt;/p&gt;

&lt;p&gt;贫穷的问题已经存在了好几千年了，虽然政府和慈善机构都在为解决贫穷而努力，但是我们依然有很多问题需要解决。&lt;/p&gt;

&lt;p&gt;要消除贫穷，就必须要倾听穷人的心声，理解穷人的生活方式，只有基于这样的理解，我们才能找到贫穷的原因，进而找到应对的方法。&lt;/p&gt;

&lt;h1 id=&quot;贫穷或富裕是个长期投资问题&quot;&gt;贫穷或富裕，是个长期投资问题&lt;/h1&gt;

&lt;p&gt;我们为何贫穷？相信很多人心里都有这个疑问，老感觉自己摆脱不了贫困，跨越不了阶级的鸿沟。尤其对年轻人来说，这种焦虑的情绪似乎更明显。我们抱怨父母没能创造很好的生活条件，责备自己的能力不足，导致怎么努力都没办法往上流。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;这本书恰恰给了我们答案——贫穷的本质在于：穷人不愿意投资未来。&lt;/strong&gt;什么叫投资未来？也就是你对自己的人生要有长期的规划。道理看似简单，但很多人都不乐意去做，因为“未来”对于他们来讲，太遥远而且无法预测，各种的不稳定导致他们感到害怕。而害怕导致他们不想去承担任何风险，所以止步于此。&lt;/p&gt;

&lt;p&gt;现实生活中，相信大家会发现一个现象：贫者越贫，富者越富。为什么那些有钱人好像也没做什么，但是就是有钱？为什么我天天努力搬砖，精打细算地把钱存起来，但钱也没有变多，反而越来越少了？这到底为什么呢？就是因为我们的“穷人思维”。&lt;/p&gt;

&lt;p&gt;认识很多朋友，情愿把钱花出去，也不愿意把钱存起来，或者拿去做任何投资。他们口头常挂一句：“船到桥头自然直”，甚至将自己的行为美化作：活在当下，享受眼前。但有趣的是，他们并非不在意自己的未来，并非愿意一直停留在这种阶段。&lt;/p&gt;

&lt;p&gt;可他们就是害怕，所以&lt;strong&gt;不愿意牺牲一小部分的现在换取更多的未来。&lt;/strong&gt;关于健康，他们不愿意花费一点点的钱去做周年身体检查，也不愿意购买保健品，更不愿意购买保险。結果呢？一到生病了，就只能动用储蓄，严重者就是变卖资产或借高利贷去治病。到头来，不仅钱没了，健康也没了。越是富有的国家，保险系统发展越成熟。&lt;/p&gt;

&lt;p&gt;关于教育，他们不愿意投资自己或者孩子教育，像很多时期，一些农村的人不愿意让自己的孩子上学，甚至逼迫孩子辍学打工赚钱，好快点养家糊口。結果呢？他们一辈子困在农村里，为了养老而生了一大堆孩子（别忘了养儿防老的观念怎么来），最后孩子却沦为工厂的打工仔打工妹。&lt;/p&gt;

&lt;p&gt;为什么有钱人可以越来越有钱？就是他们会“投资”！君不见，有钱人一早就为孩子配置好各种保险，安排好升学路线，从一开始就赢在起跑线上。穷人呢？他们不是没钱，他们是一点钱都不愿意花在未来那里。&lt;/p&gt;

&lt;p&gt;所以，&lt;strong&gt;穷人最大的问题就是“看”不到未来。&lt;/strong&gt;&lt;/p&gt;

</description>
        <pubDate>Tue, 25 Feb 2020 00:00:00 -0600</pubDate>
        <link>http://0.0.0.0:4000/reading/2020/02/25/%E8%B4%AB%E7%A9%B7%E7%9A%84%E6%9C%AC%E8%B4%A8/</link>
        <guid isPermaLink="true">http://0.0.0.0:4000/reading/2020/02/25/%E8%B4%AB%E7%A9%B7%E7%9A%84%E6%9C%AC%E8%B4%A8/</guid>
        
        <category>book</category>
        
        <category>转载</category>
        
        
        <category>reading</category>
        
      </item>
    
  </channel>
</rss>
