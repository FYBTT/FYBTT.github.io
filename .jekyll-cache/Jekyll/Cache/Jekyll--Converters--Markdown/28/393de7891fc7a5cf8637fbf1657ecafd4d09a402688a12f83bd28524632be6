I"]Q<h1 id="51-胜率">5.1 胜率</h1>
<p>通常用[0,1]之间的数字来表示概率，不过这并非唯一的方法。也可用博彩业的另一种概率表示形式——<strong>胜率（odd）</strong>。
胜率是一个事件可能发生的概率与不发生的概率比值。
假如球队A同球队B比赛，获胜的概率为75%，我会说他们的胜率是3:1。
但当概率较低，通常称之为赔率（odd against），而不是胜率（odds in  favor）。例子中球队B获胜的概率为25%，我会说他们的赔率为3:1。
即<strong>胜率和概率是相同信息的不同表示形式</strong>。</p>

<h1 id="52-贝叶斯定理的胜率形式">5.2 贝叶斯定理的胜率形式</h1>
<p>已知贝叶斯定理的概率形式：</p>

<script type="math/tex; mode=display">p(H|D)=\frac{P(H)P(D|H)}{P(D)}</script>

<p>在相同观察数据的前提D下，如果我们有A和B两个假设，将后验概率相除的比值如下：</p>

<script type="math/tex; mode=display">\frac{p(A|D)}{P(B|D)}=\frac{P(A)P(D|A)}{P(B)P(D|B)}</script>

<p>请注意等式中出现的标准化常数$P(D)$。
若$A和B$是互斥且穷尽的，就意味着$P(A)=1-P(B)$，因此我们可以将先验的比率、后验的比率重写成胜率。将$A$的胜率写成$o(A)$,得到：</p>

<script type="math/tex; mode=display">o(A|D)=o(A)\frac{P(D|A)}{P(D|B)}</script>

<p>从字面形式上，说明了后验胜率是先验胜率乘以似然比。这就是贝叶斯定理的胜率表示形式。
<strong>例如：</strong></p>
<blockquote>
  <p>有两个盒子，盒子1中有红球30个，黄球10个。盒子2中的两种球各20个。
现在假如你随意选择一个盒子，然后选择一个球。球为红色，则它来自盒子1的概率是多少？</p>
</blockquote>

<p>取到盒子1的先验概率为50%，所以盒子A的胜率为1。</p>

<script type="math/tex; mode=display">似然度的比值=\frac{P(D|A)}{P(D|B)}=\frac{P(黄球|盒1)}{P(黄球|盒2)}</script>

<p>所以后验胜率比为3:2。</p>

<h1 id="53-奥利弗的血迹">5.3 奥利弗的血迹</h1>
<p>以下是来自麦凯的《信息理论、推理和学习》的另一个问题。</p>

<blockquote>
  <p>在一个犯罪现场，有两个人留下血迹，一个嫌犯奥利弗是O型血。现场发现的血迹分别为O型（当地有60%的人口血液类型）和AB型（仅1%的罕见类型）。
那么这些数据是否支持奥利弗是嫌犯？</p>
</blockquote>

<p>要回答这个问题，我们需要想想”数据支持了假设“这到底意味着说明。</p>

<p>直觉上，相比之前，如果某一假设随着数据的出现而呈现更大的可能性，我们就说”数据支持了假设“。
在盒中取球的问题上，概率为3:5。因此我们说香草饼干这一个数据作为证据支持其来自盒子1。
贝叶斯定理的胜率形式提供了一种方法，使这一直觉更加准确。
回顾一下公式：</p>

<script type="math/tex; mode=display">o(A|D)=o(A)\frac{P(D|A)}{P(D|B)}</script>

<p>除以o(A):</p>

<script type="math/tex; mode=display">\frac{o(A|D)}{o(A)}=\frac{P(A)P(D|A)}{P(B)P(D|B)}</script>

<p>等式左边是后验胜率和前验胜率的比值。右边是似然比，也被称为<strong>贝叶斯因子</strong>。
如果贝叶斯因子的值大于1，则意味着数据更支持假设A而不支持假设B。
现在，我们回到原来的问题。如果奥利弗是在嫌犯，就解释了样本O型血的来源，因此数据的概率就是在人群中挑中一个AB型血的人概率1%。
如果奥利弗没有在现场留下血液，我们就要对连个样本及逆行解释。假设在人群中任意选取两人，有多大可能性找到O和AB型的人呢？</p>

<script type="math/tex; mode=display">P=2(0.6)(0.01)=1.2\%</script>

<p>如果不是奥利弗的血液，数据的似然度还会高些，所以这个血液证据并没有支持奥利弗是嫌犯。</p>

<h1 id="54-加数">5.4 加数</h1>
<p>贝叶斯统计的基本操作是$Update$，这需要先验概率和一组数据，然后产生一个后验分布。但是，实际解决问题中通常涉及其他操作，包括缩放、加法和其他算数运算、最大值和最小值，还有混合运算。
本章主要介绍加法和最大值。</p>

<p>前提，我们对三个6面筛子的总和感兴趣，有两种方法可以计算其总和分布。</p>
<ol>
  <li>模拟：
 给定一个表示筛子面分布的Pmf，可以绘制随机样本，把他们都加起来，累加每次模拟求和的分布。</li>
  <li>枚举：
 给定两个Pmfs，可以枚举所有可能的数值对，并计算其和的分布。（后面会以连加的方式得到3个筛子的总体分布）</li>
</ol>

<p>thinkbays提供了这两个函数。首先定义一个类来表示单个骰子：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Die</span><span class="p">(</span><span class="n">thinkbays</span><span class="o">.</span><span class="n">Pmf</span><span class="p">):</span>
	<span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">sides</span><span class="p">):</span>
		<span class="n">thinkbays</span><span class="o">.</span><span class="n">Pmf</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">)</span>
		<span class="k">for</span> <span class="n">x</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="mi">1</span><span class="p">,</span> <span class="n">sides</span> <span class="o">+</span> <span class="mi">1</span><span class="p">):</span>
			<span class="bp">self</span><span class="o">.</span><span class="nb">set</span><span class="p">(</span><span class="n">x</span><span class="p">,</span> <span class="mi">1</span><span class="p">)</span>
		<span class="bp">self</span><span class="o">.</span><span class="n">Normalize</span><span class="p">()</span>
</code></pre></div></div>
<p>现在，可以创建一个6面骰子:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d6</span> <span class="o">=</span> <span class="n">Die</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
</code></pre></div></div>
<p>然后使用thinkbays.SampleSum产生1000次转动3个骰子的样本。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">dice</span> <span class="o">=</span> <span class="p">[</span><span class="n">d6</span><span class="p">]</span> <span class="o">*</span> <span class="mi">3</span>
<span class="n">three</span> <span class="o">=</span> <span class="n">thinkbays</span><span class="o">.</span><span class="n">SampleSum</span><span class="p">(</span><span class="n">dice</span><span class="p">,</span> <span class="mi">1000</span><span class="p">)</span>
</code></pre></div></div>
<p>SampleSum以分布的列表（$Pmf或Cdf$对象）和样本大小n为参数。它产生n次随机样本的和（单次模拟的汇总——转动3次骰子），并将其分布作为一个$Pmf$对象返回。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">SampleSum</span><span class="p">(</span><span class="n">dists</span><span class="p">,</span> <span class="n">n</span><span class="p">):</span>
	<span class="n">pmf</span> <span class="o">=</span> <span class="n">MakePmfFromList</span><span class="p">(</span><span class="n">RandomSum</span><span class="p">(</span><span class="n">dists</span><span class="p">)</span> <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nb">xrange</span><span class="p">(</span><span class="n">n</span><span class="p">))</span>
	<span class="k">return</span> <span class="n">pmf</span>
</code></pre></div></div>
<p>SampleSum使用RandomSum，也在thinkbays.py中：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">RandomSum</span><span class="p">(</span><span class="n">dists</span><span class="p">):</span>
	<span class="n">total</span> <span class="o">=</span> <span class="nb">sum</span><span class="p">(</span><span class="n">dist</span><span class="o">.</span><span class="n">Random</span><span class="p">()</span> <span class="k">for</span> <span class="n">dist</span> <span class="ow">in</span> <span class="n">dists</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">total</span>
</code></pre></div></div>
<p>RandomSum在每个分布中调用Random然后汇总结果。
<strong>模拟的缺点</strong>是得到的结果至少近似正确的，随着n的变大，结果会更准确，但运行时间也会增加。</p>

<p>另一种方法是枚举所有大的值，并计算每对概率和总和。这在$Pmf$.__add__ 上实现：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
	<span class="n">pmf</span> <span class="o">=</span> <span class="n">Pmf</span><span class="p">()</span>
	<span class="k">for</span> <span class="n">v1</span><span class="p">,</span> <span class="n">p1</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">Items</span><span class="p">():</span>
		<span class="k">for</span> <span class="n">v2</span><span class="p">,</span> <span class="n">p2</span> <span class="ow">in</span> <span class="n">other</span><span class="o">.</span><span class="n">Items</span><span class="p">():</span>
			<span class="n">pmf</span><span class="o">.</span><span class="n">Incr</span><span class="p">(</span><span class="n">v1</span><span class="o">+</span><span class="n">v2</span><span class="p">,</span> <span class="n">p1</span><span class="o">+</span><span class="n">p2</span><span class="p">)</span>
	<span class="k">return</span> <span class="n">pmf</span>
</code></pre></div></div>
<p>下面是如何使用它：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">three_exact</span> <span class="o">=</span> <span class="n">d6</span> <span class="o">+</span> <span class="n">d6</span> <span class="o">+</span> <span class="n">d6</span>
</code></pre></div></div>
<p>当在$Pmf$中应用+操作符时，Python调用__add__函数。在这个例子中，__add__被调用了两次。</p>

<h1 id="55-最大化">5.5 最大化</h1>
<p>有三种方法计算最大值的分布。</p>
<ol>
  <li><strong>模拟</strong>
 给定一个Pmf，代表单一选择的分布，可以生成随机样本，找到最大值和模拟最大值的累计分布。
 直接修改RandomSum函数即可。
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">RandomMax</span><span class="p">(</span><span class="n">dists</span><span class="p">):</span>
     <span class="n">total</span> <span class="o">=</span> <span class="nb">max</span><span class="p">(</span><span class="n">dist</span><span class="o">.</span><span class="n">Random</span><span class="p">()</span> <span class="k">for</span> <span class="n">dist</span> <span class="ow">in</span> <span class="n">dists</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">total</span>
</code></pre></div>    </div>
  </li>
  <li><strong>枚举</strong>
 给定两个Pmf，可以枚举所有可能的数值对，并计算分布的最大值。
    <div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code> <span class="k">def</span> <span class="nf">__add__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">other</span><span class="p">):</span>
     <span class="n">pmf</span> <span class="o">=</span> <span class="n">Pmf</span><span class="p">()</span>
     <span class="k">for</span> <span class="n">v1</span><span class="p">,</span> <span class="n">p1</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">Items</span><span class="p">():</span>
         <span class="k">for</span> <span class="n">v2</span><span class="p">,</span> <span class="n">p2</span> <span class="ow">in</span> <span class="n">other</span><span class="o">.</span><span class="n">Items</span><span class="p">():</span>
             <span class="n">pmf</span><span class="o">.</span><span class="n">Incr</span><span class="p">(</span><span class="nb">max</span><span class="p">(</span><span class="n">v1</span><span class="p">,</span> <span class="n">v2</span><span class="p">),</span> <span class="n">p1</span><span class="o">+</span><span class="n">p2</span><span class="p">)</span>
     <span class="k">return</span> <span class="n">pmf</span>
</code></pre></div>    </div>
  </li>
  <li><strong>指数计算</strong>
 这里介绍一种更为简单而有效的算法，基于累计分布函数进行分析。</li>
</ol>

<p>首先给出累积分布函数的定义：
<script type="math/tex">CDF(x) = p(X \leq x)</script></p>

<p>如果我从$CDF_1$中取出$X$，从$CDF_2$中取出$Y$，计算最大值$Z = max(X,Y)$，则$Z$小于等于5的概率是多少？</p>

<p>如果选择$X和Y$是独立行为</p>

<script type="math/tex; mode=display">CDF_3(5) = CDF_1(5)CDF_2(5)</script>

<p>其中$CDF_3$是$Z$的分布。
我们可以一般化5为任意值的情况：
<script type="math/tex">CDF_3(z) = CDF_1(z)CDF_2(z)</script></p>

<p>特例情况下是我们从同一分布中选择k值，
<script type="math/tex">CDF_k(z) = CDF_1(z)^k</script>
因此，为了求k的最大值的分布，我们可以枚举给定$Cdf$的概率再将其变化为k的次幂。$Cdf$提供了一种方法，该方法如下：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">class</span> <span class="nc">Cdf</span>
	<span class="k">def</span> <span class="nf">Max</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">k</span><span class="p">):</span>
		<span class="n">cdf</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">copy</span><span class="p">()</span>
		<span class="n">cdf</span><span class="o">.</span><span class="n">ps</span> <span class="o">=</span> <span class="p">[</span><span class="n">p</span><span class="o">**</span><span class="n">k</span> <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">cdf</span><span class="o">.</span><span class="n">ps</span><span class="p">]</span>
		<span class="k">return</span> <span class="n">cdf</span>
</code></pre></div></div>
<h1 id="56-混合分布">5.6 混合分布</h1>
<p>假设有一个骰子，清单如下：
| 个数| 种类|
|—-|—-|
|5|	4面骰子|
|4|	6面骰子|
|3|	8面骰子|
|2|	12面骰子|
|1|	20面骰子|</p>

<p>从盒子中选择一个骰子转动，如果确定骰子，很容易确定分布。n面骰子产生一个从1到n的均匀分布。
若随机选择骰子，由此产生的分布测试有不同上界的均匀分布的混合分布。</p>

<p>在一般情况下，这类混合量不适合任何简单的数学模型，但它可以从$Pmf$直接计算得到。跟之前的小节内容一样，一个选择是模拟，生成一个随机样本计算模拟样本的$Pmf$。
但为了得到一个确切的解法，让我们选从只有两个骰子的简单版本开始，一个6面和一个8面。可以用$Pmf$来表示每个骰子。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">d6</span> <span class="o">=</span> <span class="n">Die</span><span class="p">(</span><span class="mi">6</span><span class="p">)</span>
<span class="n">d8</span> <span class="o">=</span> <span class="n">Die</span><span class="p">(</span><span class="mi">8</span><span class="p">)</span>
</code></pre></div></div>
<p>然后创建一个$Pmf$来表示这一混合分布：
只有两个骰子的简单版本开始，一个6面和一个8面。可以用$Pmf$来表示每个骰子。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mix</span> <span class="o">=</span> <span class="n">thinkbayes</span><span class="o">.</span><span class="n">Pmf</span><span class="p">()</span>
<span class="k">for</span> <span class="n">die</span> <span class="ow">in</span> <span class="p">[</span><span class="n">d6</span><span class="p">,</span> <span class="n">d8</span><span class="p">]:</span>
	<span class="k">for</span> <span class="n">outcome</span><span class="p">,</span> <span class="n">prob</span> <span class="ow">in</span> <span class="n">die</span><span class="o">.</span><span class="n">Items</span><span class="p">():</span>
		<span class="n">mix</span><span class="o">.</span><span class="n">Incr</span><span class="p">(</span><span class="n">outcome</span><span class="p">,</span> <span class="n">prob</span><span class="p">)</span>
<span class="n">mix</span><span class="o">.</span><span class="n">Normalze</span><span class="p">()</span>
</code></pre></div></div>
<p>更一般的，假如事先知道选中每一个骰子的概率，就能对结果进行相应的加权。
首先创建一个映射了骰子和骰子被讯中概率的$Pmf$对象：
只有两个骰子的简单版本开始，一个6面和一个8面。可以用$Pmf$来表示每个骰子。</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pmf_dice</span> <span class="o">=</span> <span class="n">thinkbayes</span><span class="o">.</span><span class="n">Pmf</span><span class="p">()</span>
<span class="n">pmf_dice</span><span class="o">.</span><span class="nb">set</span><span class="p">(</span><span class="n">Die</span><span class="p">(</span><span class="mi">4</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">pmf_dice</span><span class="o">.</span><span class="nb">set</span><span class="p">(</span><span class="n">Die</span><span class="p">(</span><span class="mi">6</span><span class="p">),</span> <span class="mi">3</span><span class="p">)</span>
<span class="n">pmf_dice</span><span class="o">.</span><span class="nb">set</span><span class="p">(</span><span class="n">Die</span><span class="p">(</span><span class="mi">8</span><span class="p">),</span> <span class="mi">2</span><span class="p">)</span>
<span class="n">pmf_dice</span><span class="o">.</span><span class="nb">set</span><span class="p">(</span><span class="n">Die</span><span class="p">(</span><span class="mi">12</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">pmf_dice</span><span class="o">.</span><span class="nb">set</span><span class="p">(</span><span class="n">Die</span><span class="p">(</span><span class="mi">20</span><span class="p">),</span> <span class="mi">1</span><span class="p">)</span>
<span class="n">pmf_dice</span><span class="o">.</span><span class="n">Normalize</span><span class="p">()</span>
</code></pre></div></div>
<p>于是，我们得到计算混合分布算法的一个更通用版本：</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">mix</span> <span class="o">=</span> <span class="n">thinkbayes</span><span class="o">.</span><span class="n">Pmf</span><span class="p">()</span>
<span class="k">for</span> <span class="n">die</span><span class="err">，</span> <span class="n">weight</span> <span class="ow">in</span> <span class="n">dice</span><span class="o">.</span><span class="n">Items</span><span class="p">():</span>
	<span class="k">for</span> <span class="n">outcome</span><span class="p">,</span> <span class="n">prob</span> <span class="ow">in</span> <span class="n">die</span><span class="o">.</span><span class="n">Items</span><span class="p">():</span>
		<span class="n">mix</span><span class="o">.</span><span class="n">Incr</span><span class="p">(</span><span class="n">outcome</span><span class="p">,</span> <span class="n">weight</span><span class="o">*</span><span class="n">prob</span><span class="p">)</span>
</code></pre></div></div>
:ET